{"ast":null,"code":"import { cond, lessThan, multiply, pow, cos, sqrt, sub, add, divide } from './base';\nimport AnimatedBezier from './core/AnimatedBezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nexport default class Easing {\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t) {\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t) {\n    return multiply(t, t);\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t) {\n    return multiply(t, t, t);\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n) {\n    return t => pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t) {\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t) {\n    return sub(1, sqrt(sub(1, multiply(t, t))));\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t) {\n    return pow(2, multiply(10, sub(t, 1)));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  static elastic() {\n    let bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const p = bounciness * Math.PI;\n    return t => sub(1, multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p))));\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return t => multiply(t, t, sub(multiply(add(s, 1), t), s));\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t) {\n    const sq = v => multiply(7.5625, v, v);\n    return cond(lessThan(t, 1 / 2.75), sq(t), cond(lessThan(t, 2 / 2.75), add(0.75, sq(sub(t, 1.5 / 2.75))), cond(lessThan(t, 2.5 / 2.76), add(0.9375, sq(sub(t, 2.25 / 2.75))), add(0.984375, sq(sub(t, 2.625 / 2.75))))));\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(x1, y1, x2, y2) {\n    return t => new AnimatedBezier(t, x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(easing) {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(easing) {\n    return t => sub(1, easing(sub(1, t)));\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(easing) {\n    return t => cond(lessThan(t, 0.5), divide(easing(multiply(t, 2)), 2), sub(1, divide(easing(multiply(sub(1, t), 2)), 2)));\n  }\n}","map":{"version":3,"names":["cond","lessThan","multiply","pow","cos","sqrt","sub","add","divide","AnimatedBezier","Easing","linear","t","ease","quad","cubic","poly","n","sin","Math","PI","circle","exp","elastic","bounciness","p","back","s","undefined","bounce","sq","v","bezier","x1","y1","x2","y2","in","easing","out","inOut"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/Easing.js"],"sourcesContent":["import {\n  cond,\n  lessThan,\n  multiply,\n  pow,\n  cos,\n  sqrt,\n  sub,\n  add,\n  divide,\n} from './base';\nimport AnimatedBezier from './core/AnimatedBezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nexport default class Easing {\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t) {\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t) {\n    return multiply(t, t);\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t) {\n    return multiply(t, t, t);\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n) {\n    return (t) => pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t) {\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t) {\n    return sub(1, sqrt(sub(1, multiply(t, t))));\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t) {\n    return pow(2, multiply(10, sub(t, 1)));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  static elastic(bounciness = 1) {\n    const p = bounciness * Math.PI;\n    return (t) =>\n      sub(\n        1,\n        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))\n      );\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return (t) => multiply(t, t, sub(multiply(add(s, 1), t), s));\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t) {\n    const sq = (v) => multiply(7.5625, v, v);\n    return cond(\n      lessThan(t, 1 / 2.75),\n      sq(t),\n      cond(\n        lessThan(t, 2 / 2.75),\n        add(0.75, sq(sub(t, 1.5 / 2.75))),\n        cond(\n          lessThan(t, 2.5 / 2.76),\n          add(0.9375, sq(sub(t, 2.25 / 2.75))),\n          add(0.984375, sq(sub(t, 2.625 / 2.75)))\n        )\n      )\n    );\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(x1, y1, x2, y2) {\n    return (t) => new AnimatedBezier(t, x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(easing) {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(easing) {\n    return (t) => sub(1, easing(sub(1, t)));\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(easing) {\n    return (t) =>\n      cond(\n        lessThan(t, 0.5),\n        divide(easing(multiply(t, 2)), 2),\n        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))\n      );\n  }\n}\n"],"mappings":"AAAA,SACEA,IAAI,EACJC,QAAQ,EACRC,QAAQ,EACRC,GAAG,EACHC,GAAG,EACHC,IAAI,EACJC,GAAG,EACHC,GAAG,EACHC,MAAM,QACD,QAAQ;AACf,OAAOC,cAAc,MAAM,uBAAuB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,MAAM,CAAC;EAC1B;AACF;AACA;AACA;AACA;AACA;EACE,OAAOC,MAAM,CAACC,CAAC,EAAE;IACf,OAAOA,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOC,IAAI,CAACD,CAAC,EAAE;IACb,OAAO,IAAIH,cAAc,CAACG,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOE,IAAI,CAACF,CAAC,EAAE;IACb,OAAOV,QAAQ,CAACU,CAAC,EAAEA,CAAC,CAAC;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOG,KAAK,CAACH,CAAC,EAAE;IACd,OAAOV,QAAQ,CAACU,CAAC,EAAEA,CAAC,EAAEA,CAAC,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOI,IAAI,CAACC,CAAC,EAAE;IACb,OAAQL,CAAC,IAAKT,GAAG,CAACS,CAAC,EAAEK,CAAC,CAAC;EACzB;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOC,GAAG,CAACN,CAAC,EAAE;IACZ,OAAON,GAAG,CAAC,CAAC,EAAEF,GAAG,CAACF,QAAQ,CAACU,CAAC,EAAEO,IAAI,CAACC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOC,MAAM,CAACT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"},"metadata":{},"sourceType":"module","externalDependencies":[]}