{"ast":null,"code":"import AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n  constructor(what, value) {\n    invariant(what instanceof AnimatedNode, `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`);\n    invariant(value instanceof AnimatedNode, `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`);\n    super({\n      type: 'set',\n      what,\n      value\n    }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"names":["AnimatedNode","invariant","val","adapt","AnimatedSet","_what","_value","constructor","what","value","type","_constant","toString","__nodeID","__onEvaluate","newValue","setValue","createAnimatedSet"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedSet.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,WAAW;AACjC,SAASC,GAAG,QAAQ,QAAQ;AAC5B,SAASC,KAAK,QAAQ,uBAAuB;AAE7C,MAAMC,WAAW,SAASJ,YAAY,CAAC;EACrCK,KAAK;EACLC,MAAM;EAENC,WAAW,CAACC,IAAI,EAAEC,KAAK,EAAE;IACvBR,SAAS,CACPO,IAAI,YAAYR,YAAY,EAC3B,kFAAiFQ,IAAK,EAAC,CACzF;IACDP,SAAS,CACPQ,KAAK,YAAYT,YAAY,EAC5B,qGAAoGS,KAAM,EAAC,CAC7G;IACD,KAAK,CAAC;MAAEC,IAAI,EAAE,KAAK;MAAEF,IAAI;MAAEC;IAAM,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;IAC5CR,SAAS,CAAC,CAACO,IAAI,CAACG,SAAS,EAAE,oCAAoC,CAAC;IAChE,IAAI,CAACN,KAAK,GAAGG,IAAI;IACjB,IAAI,CAACF,MAAM,GAAGG,KAAK;EACrB;EAEAG,QAAQ,GAAG;IACT,OAAQ,oBAAmB,IAAI,CAACC,QAAS,EAAC;EAC5C;EAEAC,YAAY,GAAG;IACb,MAAMC,QAAQ,GAAGb,GAAG,CAAC,IAAI,CAACI,MAAM,CAAC;IACjC,IAAI,CAACD,KAAK,CAACW,QAAQ,CAACD,QAAQ,CAAC;IAC7B,OAAOA,QAAQ;EACjB;AACF;AAEA,OAAO,SAASE,iBAAiB,CAACT,IAAI,EAAEC,KAAK,EAAE;EAC7C,OAAO,IAAIL,WAAW,CAACI,IAAI,EAAEL,KAAK,CAACM,KAAK,CAAC,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}