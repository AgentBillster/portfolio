{"ast":null,"code":"import { runOnUI } from '../core';\nexport const prepareUIRegistry = runOnUI(() => {\n  'worklet';\n\n  const frameCallbackRegistry = {\n    frameCallbackRegistry: new Map(),\n    activeFrameCallbacks: new Set(),\n    previousFrameTimestamp: null,\n    runCallbacks() {\n      const loop = timestamp => {\n        if (this.previousFrameTimestamp === null) {\n          this.previousFrameTimestamp = timestamp;\n        }\n        const delta = timestamp - this.previousFrameTimestamp;\n        this.activeFrameCallbacks.forEach(callbackId => {\n          const callbackDetails = this.frameCallbackRegistry.get(callbackId);\n          const {\n            startTime\n          } = callbackDetails;\n          if (startTime === null) {\n            // First frame\n            callbackDetails.startTime = timestamp;\n            callbackDetails.callback({\n              timestamp,\n              timeSincePreviousFrame: null,\n              timeSinceFirstFrame: 0\n            });\n          } else {\n            // Next frame\n            callbackDetails.callback({\n              timestamp,\n              timeSincePreviousFrame: delta,\n              timeSinceFirstFrame: timestamp - startTime\n            });\n          }\n        });\n        if (this.activeFrameCallbacks.size > 0) {\n          this.previousFrameTimestamp = timestamp;\n          requestAnimationFrame(loop);\n        } else {\n          this.previousFrameTimestamp = null;\n        }\n      };\n      // runCallback() should only be called after registering a callback,\n      // so if there is only one active callback, then it means that there were\n      // zero previously and the loop isn't running yet.\n      if (this.activeFrameCallbacks.size === 1) {\n        requestAnimationFrame(loop);\n      }\n    },\n    registerFrameCallback(callback, callbackId) {\n      this.frameCallbackRegistry.set(callbackId, {\n        callback: callback,\n        startTime: null\n      });\n    },\n    unregisterFrameCallback(callbackId) {\n      this.manageStateFrameCallback(callbackId, false);\n      this.frameCallbackRegistry.delete(callbackId);\n    },\n    manageStateFrameCallback(callbackId, state) {\n      if (callbackId === -1) {\n        return;\n      }\n      if (state) {\n        this.activeFrameCallbacks.add(callbackId);\n        this.runCallbacks();\n      } else {\n        const callback = this.frameCallbackRegistry.get(callbackId);\n        callback.startTime = null;\n        this.activeFrameCallbacks.delete(callbackId);\n      }\n    }\n  };\n  global._frameCallbackRegistry = frameCallbackRegistry;\n});","map":{"version":3,"names":["runOnUI","prepareUIRegistry","frameCallbackRegistry","Map","activeFrameCallbacks","Set","previousFrameTimestamp","runCallbacks","loop","timestamp","delta","forEach","callbackId","callbackDetails","get","startTime","callback","timeSincePreviousFrame","timeSinceFirstFrame","size","requestAnimationFrame","registerFrameCallback","set","unregisterFrameCallback","manageStateFrameCallback","delete","state","add","global","_frameCallbackRegistry"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated2/frameCallback/FrameCallbackRegistryUI.js"],"sourcesContent":["import { runOnUI } from '../core';\nexport const prepareUIRegistry = runOnUI(() => {\n    'worklet';\n    const frameCallbackRegistry = {\n        frameCallbackRegistry: new Map(),\n        activeFrameCallbacks: new Set(),\n        previousFrameTimestamp: null,\n        runCallbacks() {\n            const loop = (timestamp) => {\n                if (this.previousFrameTimestamp === null) {\n                    this.previousFrameTimestamp = timestamp;\n                }\n                const delta = timestamp - this.previousFrameTimestamp;\n                this.activeFrameCallbacks.forEach((callbackId) => {\n                    const callbackDetails = this.frameCallbackRegistry.get(callbackId);\n                    const { startTime } = callbackDetails;\n                    if (startTime === null) {\n                        // First frame\n                        callbackDetails.startTime = timestamp;\n                        callbackDetails.callback({\n                            timestamp,\n                            timeSincePreviousFrame: null,\n                            timeSinceFirstFrame: 0,\n                        });\n                    }\n                    else {\n                        // Next frame\n                        callbackDetails.callback({\n                            timestamp,\n                            timeSincePreviousFrame: delta,\n                            timeSinceFirstFrame: timestamp - startTime,\n                        });\n                    }\n                });\n                if (this.activeFrameCallbacks.size > 0) {\n                    this.previousFrameTimestamp = timestamp;\n                    requestAnimationFrame(loop);\n                }\n                else {\n                    this.previousFrameTimestamp = null;\n                }\n            };\n            // runCallback() should only be called after registering a callback,\n            // so if there is only one active callback, then it means that there were\n            // zero previously and the loop isn't running yet.\n            if (this.activeFrameCallbacks.size === 1) {\n                requestAnimationFrame(loop);\n            }\n        },\n        registerFrameCallback(callback, callbackId) {\n            this.frameCallbackRegistry.set(callbackId, {\n                callback: callback,\n                startTime: null,\n            });\n        },\n        unregisterFrameCallback(callbackId) {\n            this.manageStateFrameCallback(callbackId, false);\n            this.frameCallbackRegistry.delete(callbackId);\n        },\n        manageStateFrameCallback(callbackId, state) {\n            if (callbackId === -1) {\n                return;\n            }\n            if (state) {\n                this.activeFrameCallbacks.add(callbackId);\n                this.runCallbacks();\n            }\n            else {\n                const callback = this.frameCallbackRegistry.get(callbackId);\n                callback.startTime = null;\n                this.activeFrameCallbacks.delete(callbackId);\n            }\n        },\n    };\n    global._frameCallbackRegistry = frameCallbackRegistry;\n});\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,SAAS;AACjC,OAAO,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,MAAM;EAC3C,SAAS;;EACT,MAAME,qBAAqB,GAAG;IAC1BA,qBAAqB,EAAE,IAAIC,GAAG,EAAE;IAChCC,oBAAoB,EAAE,IAAIC,GAAG,EAAE;IAC/BC,sBAAsB,EAAE,IAAI;IAC5BC,YAAY,GAAG;MACX,MAAMC,IAAI,GAAIC,SAAS,IAAK;QACxB,IAAI,IAAI,CAACH,sBAAsB,KAAK,IAAI,EAAE;UACtC,IAAI,CAACA,sBAAsB,GAAGG,SAAS;QAC3C;QACA,MAAMC,KAAK,GAAGD,SAAS,GAAG,IAAI,CAACH,sBAAsB;QACrD,IAAI,CAACF,oBAAoB,CAACO,OAAO,CAAEC,UAAU,IAAK;UAC9C,MAAMC,eAAe,GAAG,IAAI,CAACX,qBAAqB,CAACY,GAAG,CAACF,UAAU,CAAC;UAClE,MAAM;YAAEG;UAAU,CAAC,GAAGF,eAAe;UACrC,IAAIE,SAAS,KAAK,IAAI,EAAE;YACpB;YACAF,eAAe,CAACE,SAAS,GAAGN,SAAS;YACrCI,eAAe,CAACG,QAAQ,CAAC;cACrBP,SAAS;cACTQ,sBAAsB,EAAE,IAAI;cAC5BC,mBAAmB,EAAE;YACzB,CAAC,CAAC;UACN,CAAC,MACI;YACD;YACAL,eAAe,CAACG,QAAQ,CAAC;cACrBP,SAAS;cACTQ,sBAAsB,EAAEP,KAAK;cAC7BQ,mBAAmB,EAAET,SAAS,GAAGM;YACrC,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;QACF,IAAI,IAAI,CAACX,oBAAoB,CAACe,IAAI,GAAG,CAAC,EAAE;UACpC,IAAI,CAACb,sBAAsB,GAAGG,SAAS;UACvCW,qBAAqB,CAACZ,IAAI,CAAC;QAC/B,CAAC,MACI;UACD,IAAI,CAACF,sBAAsB,GAAG,IAAI;QACtC;MACJ,CAAC;MACD;MACA;MACA;MACA,IAAI,IAAI,CAACF,oBAAoB,CAACe,IAAI,KAAK,CAAC,EAAE;QACtCC,qBAAqB,CAACZ,IAAI,CAAC;MAC/B;IACJ,CAAC;IACDa,qBAAqB,CAACL,QAAQ,EAAEJ,UAAU,EAAE;MACxC,IAAI,CAACV,qBAAqB,CAACoB,GAAG,CAACV,UAAU,EAAE;QACvCI,QAAQ,EAAEA,QAAQ;QAClBD,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IACDQ,uBAAuB,CAACX,UAAU,EAAE;MAChC,IAAI,CAACY,wBAAwB,CAACZ,UAAU,EAAE,KAAK,CAAC;MAChD,IAAI,CAACV,qBAAqB,CAACuB,MAAM,CAACb,UAAU,CAAC;IACjD,CAAC;IACDY,wBAAwB,CAACZ,UAAU,EAAEc,KAAK,EAAE;MACxC,IAAId,UAAU,KAAK,CAAC,CAAC,EAAE;QACnB;MACJ;MACA,IAAIc,KAAK,EAAE;QACP,IAAI,CAACtB,oBAAoB,CAACuB,GAAG,CAACf,UAAU,CAAC;QACzC,IAAI,CAACL,YAAY,EAAE;MACvB,CAAC,MACI;QACD,MAAMS,QAAQ,GAAG,IAAI,CAACd,qBAAqB,CAACY,GAAG,CAACF,UAAU,CAAC;QAC3DI,QAAQ,CAACD,SAAS,GAAG,IAAI;QACzB,IAAI,CAACX,oBAAoB,CAACqB,MAAM,CAACb,UAAU,CAAC;MAChD;IACJ;EACJ,CAAC;EACDgB,MAAM,CAACC,sBAAsB,GAAG3B,qBAAqB;AACzD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}