{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\nexport default ((Navigator, navigatorConfig) => {\n  var _class, _temp;\n  return _temp = _class = class KeyboardAwareNavigator extends React.Component {\n    constructor() {\n      super(...arguments);\n      _defineProperty(this, \"_previouslyFocusedTextInput\", null);\n      _defineProperty(this, \"_handleGestureBegin\", () => {\n        this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n        }\n        this.props.onGestureBegin && this.props.onGestureBegin();\n      });\n      _defineProperty(this, \"_handleGestureCanceled\", () => {\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n        }\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n      });\n      _defineProperty(this, \"_handleGestureEnd\", () => {\n        this._previouslyFocusedTextInput = null;\n        this.props.onGestureFinish && this.props.onGestureFinish();\n      });\n      _defineProperty(this, \"_handleTransitionStart\", (transitionProps, prevTransitionProps) => {\n        // TODO: We should not even have received the transition start event\n        // in the case where the index did not change, I believe. We\n        // should revisit this after 2.0 release.\n        if (transitionProps.index !== prevTransitionProps.index) {\n          const currentField = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n        const onTransitionStart = this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      });\n    }\n    render() {\n      return /*#__PURE__*/React.createElement(Navigator, _extends({}, this.props, {\n        onGestureBegin: this._handleGestureBegin,\n        onGestureCanceled: this._handleGestureCanceled,\n        onGestureEnd: this._handleGestureEnd,\n        onTransitionStart: this._handleTransitionStart\n      }));\n    }\n  }, _defineProperty(_class, \"router\", Navigator.router), _defineProperty(_class, \"navigationOptions\", Navigator.navigationOptions), _temp;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,gBAAe,CAACC,SAAD,EAAYC,eAAZ;EAAA;EAAA,wBACb,MAAMC,sBAAN,SAAqCJ,KAAK,CAACK,SAA3C,CAAqD;IAAAC;MAAA;MAAAC,qDAGrB,IAHqB;MAAAA,6CAK7B,MAAM;QAC1B,KAAKC,2BAAL,GAAmCP,SAAS,CAACQ,KAAV,CAAgBC,qBAAhB,GAC/BT,SAAS,CAACQ,KAAV,CAAgBC,qBAAhB,EAD+B,GAE/BT,SAAS,CAACQ,KAAV,CAAgBE,qBAAhB,EAFJ;QAGA,IAAI,KAAKH,2BAAT,EAAsC;UACpCP,SAAS,CAACQ,KAAV,CAAgBG,aAAhB,CAA8B,KAAKJ,2BAAnC;QACD;QACD,KAAKK,KAAL,CAAWC,cAAX,IAA6B,KAAKD,KAAL,CAAWC,cAAX,EAA7B;MACD,CAbkD;MAAAP,gDAe1B,MAAM;QAC7B,IAAI,KAAKC,2BAAT,EAAsC;UACpCP,SAAS,CAACQ,KAAV,CAAgBM,cAAhB,CAA+B,KAAKP,2BAApC;QACD;QACD,KAAKK,KAAL,CAAWG,iBAAX,IAAgC,KAAKH,KAAL,CAAWG,iBAAX,EAAhC;MACD,CApBkD;MAAAT,2CAsB/B,MAAM;QACxB,KAAKC,2BAAL,GAAmC,IAAnC;QACA,KAAKK,KAAL,CAAWI,eAAX,IAA8B,KAAKJ,KAAL,CAAWI,eAAX,EAA9B;MACD,CAzBkD;MAAAV,gDA2B1B,CAACW,eAAD,EAAkBC,mBAAlB,KAA0C;QACjE;QACA;QACA;QACA,IAAID,eAAe,CAACE,KAAhB,KAA0BD,mBAAmB,CAACC,KAAlD,EAAyD;UACvD,MAAMC,YAAY,GAAGpB,SAAS,CAACQ,KAAV,CAAgBC,qBAAhB,GACjBT,SAAS,CAACQ,KAAV,CAAgBC,qBAAhB,EADiB,GAEjBT,SAAS,CAACQ,KAAV,CAAgBE,qBAAhB,EAFJ;UAGA,IAAIU,YAAJ,EAAkB;YAChBpB,SAAS,CAACQ,KAAV,CAAgBG,aAAhB,CAA8BS,YAA9B;UACD;QACF;QAED,MAAMC,iBAAiB,GACrB,KAAKT,KAAL,CAAWS,iBAAX,IAAgCnB,eAAe,CAACmB,iBADlD;QAEAA,iBAAiB,IACfA,iBAAiB,CAACJ,eAAD,EAAkBC,mBAAlB,CADnB;MAED,CA5CkD;IAAA;IA8CnDI,MAAM,GAAG;MACP,oBACEvB,oBAACE,SAAD,eACM,KAAKW,KADX;QAEEC,cAAc,EAAE,KAAKU,mBAFvB;QAGER,iBAAiB,EAAE,KAAKS,sBAH1B;QAIEC,YAAY,EAAE,KAAKC,iBAJrB;QAKEL,iBAAiB,EAAE,KAAKM;MAL1B,GADF;IASD;EAxDkD,CADxC,oCAEK1B,SAAS,CAAC2B,MAFf,gDAGgB3B,SAAS,CAAC4B,iBAH1B;AAAA,CAAf","names":["React","TextInput","Navigator","navigatorConfig","KeyboardAwareNavigator","Component","constructor","_defineProperty","_previouslyFocusedTextInput","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","props","onGestureBegin","focusTextInput","onGestureCanceled","onGestureFinish","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","render","_handleGestureBegin","_handleGestureCanceled","onGestureEnd","_handleGestureEnd","_handleTransitionStart","router","navigationOptions"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\@react-navigation\\native\\lib\\module\\createKeyboardAwareNavigator.js"],"sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default (Navigator, navigatorConfig) =>\n  class KeyboardAwareNavigator extends React.Component {\n    static router = Navigator.router;\n    static navigationOptions = Navigator.navigationOptions;\n    _previouslyFocusedTextInput = null;\n\n    _handleGestureBegin = () => {\n      this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput\n        ? TextInput.State.currentlyFocusedInput()\n        : TextInput.State.currentlyFocusedField();\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    };\n\n    _handleGestureCanceled = () => {\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    };\n\n    _handleGestureEnd = () => {\n      this._previouslyFocusedTextInput = null;\n      this.props.onGestureFinish && this.props.onGestureFinish();\n    };\n\n    _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n      // TODO: We should not even have received the transition start event\n      // in the case where the index did not change, I believe. We\n      // should revisit this after 2.0 release.\n      if (transitionProps.index !== prevTransitionProps.index) {\n        const currentField = TextInput.State.currentlyFocusedInput\n          ? TextInput.State.currentlyFocusedInput()\n          : TextInput.State.currentlyFocusedField();\n        if (currentField) {\n          TextInput.State.blurTextInput(currentField);\n        }\n      }\n\n      const onTransitionStart =\n        this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n      onTransitionStart &&\n        onTransitionStart(transitionProps, prevTransitionProps);\n    };\n\n    render() {\n      return (\n        <Navigator\n          {...this.props}\n          onGestureBegin={this._handleGestureBegin}\n          onGestureCanceled={this._handleGestureCanceled}\n          onGestureEnd={this._handleGestureEnd}\n          onTransitionStart={this._handleTransitionStart}\n        />\n      );\n    }\n  };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}