{"ast":null,"code":"import { Easing } from '../../Easing';\nimport { withDelay, withSequence, withTiming } from '../../animation';\nexport class Keyframe {\n  /*\n    Keyframe definition should be passed in the constructor as the map\n    which keys are between range 0 - 100 (%) and correspond to the point in the animation progress.\n  */\n  constructor(definitions) {\n    this.build = () => {\n      const delay = this.delayV;\n      const delayFunction = this.getDelayFunction();\n      const {\n        keyframes,\n        initialValues\n      } = this.parseDefinitions();\n      const callback = this.callbackV;\n      return _targetValues => {\n        'worklet';\n\n        const animations = {};\n        /*\n              For each style property, an animations sequence is created that corresponds with its key points.\n              Transform style properties require special handling because of their nested structure.\n        */\n        const addAnimation = key => {\n          var _a;\n          const keyframePoints = keyframes[key];\n          // in case if property was only passed as initial value\n          if (keyframePoints.length === 0) return;\n          const animation = delayFunction(delay, keyframePoints.length === 1 ? withTiming(keyframePoints[0].value, {\n            duration: keyframePoints[0].duration,\n            easing: keyframePoints[0].easing ? keyframePoints[0].easing : Easing.linear\n          }) : withSequence.apply(this, keyframePoints.map(keyframePoint => withTiming(keyframePoint.value, {\n            duration: keyframePoint.duration,\n            easing: keyframePoint.easing ? keyframePoint.easing : Easing.linear\n          }))));\n          if (key.includes('transform')) {\n            if (!('transform' in animations)) {\n              animations.transform = [];\n            }\n            (_a = animations.transform) === null || _a === void 0 ? void 0 : _a.push({\n              [key.split(':')[1]]: animation\n            });\n          } else {\n            animations[key] = animation;\n          }\n        };\n        Object.keys(initialValues).forEach(key => {\n          if (key.includes('transform')) {\n            initialValues[key].forEach((transformProp, index) => {\n              Object.keys(transformProp).forEach(transformPropKey => {\n                addAnimation(index.toString() + '_transform:' + transformPropKey);\n              });\n            });\n          } else {\n            addAnimation(key);\n          }\n        });\n        return {\n          animations: animations,\n          initialValues: initialValues,\n          callback: callback\n        };\n      };\n    };\n    this.definitions = definitions;\n  }\n  parseDefinitions() {\n    /*\n        Each style property contain an array with all their key points:\n        value, duration of transition to that value, and optional easing function (defaults to Linear)\n    */\n    const parsedKeyframes = {};\n    /*\n      Parsing keyframes 'from' and 'to'.\n    */\n    if (this.definitions.from) {\n      if (this.definitions['0']) {\n        throw Error(\"You cannot provide both keyframe 0 and 'from' as they both specified initial values\");\n      }\n      this.definitions['0'] = this.definitions.from;\n      delete this.definitions.from;\n    }\n    if (this.definitions.to) {\n      if (this.definitions['100']) {\n        throw Error(\"You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.\");\n      }\n      this.definitions['100'] = this.definitions.to;\n      delete this.definitions.to;\n    }\n    /*\n       One of the assumptions is that keyframe  0 is required to properly set initial values.\n       Every other keyframe should contain properties from the set provided as initial values.\n    */\n    if (!this.definitions['0']) {\n      throw Error(\"Please provide 0, or 'from' keyframe with initial state of your object.\");\n    }\n    const initialValues = this.definitions['0'];\n    /*\n      Initialize parsedKeyframes for properties provided in initial keyframe\n    */\n    Object.keys(initialValues).forEach(styleProp => {\n      var _a;\n      if (styleProp === 'transform') {\n        (_a = initialValues[styleProp]) === null || _a === void 0 ? void 0 : _a.forEach((transformStyle, index) => {\n          Object.keys(transformStyle).forEach(transformProp => {\n            parsedKeyframes[index.toString() + '_transform:' + transformProp] = [];\n          });\n        });\n      } else {\n        parsedKeyframes[styleProp] = [];\n      }\n    });\n    const duration = this.durationV ? this.durationV : 500;\n    const animationKeyPoints = Array.from(Object.keys(this.definitions));\n    const getAnimationDuration = (key, currentKeyPoint) => {\n      const maxDuration = currentKeyPoint / 100 * duration;\n      const currentDuration = parsedKeyframes[key].reduce((acc, value) => acc + value.duration, 0);\n      return maxDuration - currentDuration;\n    };\n    /*\n       Other keyframes can't contain properties that were not specified in initial keyframe.\n    */\n    const addKeyPoint = _ref => {\n      let {\n        key,\n        value,\n        currentKeyPoint,\n        easing\n      } = _ref;\n      if (!(key in parsedKeyframes)) {\n        throw Error(\"Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')\");\n      }\n      parsedKeyframes[key].push({\n        duration: getAnimationDuration(key, currentKeyPoint),\n        value: value,\n        easing: easing\n      });\n    };\n    animationKeyPoints.filter(value => parseInt(value) !== 0).sort((a, b) => parseInt(a) - parseInt(b)).forEach(keyPoint => {\n      if (parseInt(keyPoint) < 0 || parseInt(keyPoint) > 100) {\n        throw Error('Keyframe should be in between range 0 - 100.');\n      }\n      const keyframe = this.definitions[keyPoint];\n      const easing = keyframe.easing;\n      delete keyframe.easing;\n      const addKeyPointWith = (key, value) => addKeyPoint({\n        key,\n        value,\n        currentKeyPoint: parseInt(keyPoint),\n        easing\n      });\n      Object.keys(keyframe).forEach(key => {\n        var _a;\n        if (key === 'transform') {\n          (_a = keyframe[key]) === null || _a === void 0 ? void 0 : _a.forEach((transformStyle, index) => {\n            Object.keys(transformStyle).forEach(transformProp => {\n              addKeyPointWith(index.toString() + '_transform:' + transformProp, transformStyle[transformProp]);\n            });\n          });\n        } else {\n          addKeyPointWith(key, keyframe[key]);\n        }\n      });\n    });\n    return {\n      initialValues: initialValues,\n      keyframes: parsedKeyframes\n    };\n  }\n  duration(durationMs) {\n    this.durationV = durationMs;\n    return this;\n  }\n  delay(delayMs) {\n    this.delayV = delayMs;\n    return this;\n  }\n  withCallback(callback) {\n    this.callbackV = callback;\n    return this;\n  }\n  getDelayFunction() {\n    const delay = this.delayV;\n    return delay ? withDelay : (_, animation) => {\n      'worklet';\n\n      return animation;\n    };\n  }\n}","map":{"version":3,"names":["Easing","withDelay","withSequence","withTiming","Keyframe","constructor","definitions","build","delay","delayV","delayFunction","getDelayFunction","keyframes","initialValues","parseDefinitions","callback","callbackV","_targetValues","animations","addAnimation","key","_a","keyframePoints","length","animation","value","duration","easing","linear","apply","map","keyframePoint","includes","transform","push","split","Object","keys","forEach","transformProp","index","transformPropKey","toString","parsedKeyframes","from","Error","to","styleProp","transformStyle","durationV","animationKeyPoints","Array","getAnimationDuration","currentKeyPoint","maxDuration","currentDuration","reduce","acc","addKeyPoint","filter","parseInt","sort","a","b","keyPoint","keyframe","addKeyPointWith","durationMs","delayMs","withCallback","_"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/Keyframe.js"],"sourcesContent":["import { Easing } from '../../Easing';\nimport { withDelay, withSequence, withTiming } from '../../animation';\nexport class Keyframe {\n    /*\n      Keyframe definition should be passed in the constructor as the map\n      which keys are between range 0 - 100 (%) and correspond to the point in the animation progress.\n    */\n    constructor(definitions) {\n        this.build = () => {\n            const delay = this.delayV;\n            const delayFunction = this.getDelayFunction();\n            const { keyframes, initialValues } = this.parseDefinitions();\n            const callback = this.callbackV;\n            return (_targetValues) => {\n                'worklet';\n                const animations = {};\n                /*\n                      For each style property, an animations sequence is created that corresponds with its key points.\n                      Transform style properties require special handling because of their nested structure.\n                */\n                const addAnimation = (key) => {\n                    var _a;\n                    const keyframePoints = keyframes[key];\n                    // in case if property was only passed as initial value\n                    if (keyframePoints.length === 0)\n                        return;\n                    const animation = delayFunction(delay, keyframePoints.length === 1\n                        ? withTiming(keyframePoints[0].value, {\n                            duration: keyframePoints[0].duration,\n                            easing: keyframePoints[0].easing\n                                ? keyframePoints[0].easing\n                                : Easing.linear,\n                        })\n                        : withSequence.apply(this, keyframePoints.map((keyframePoint) => withTiming(keyframePoint.value, {\n                            duration: keyframePoint.duration,\n                            easing: keyframePoint.easing\n                                ? keyframePoint.easing\n                                : Easing.linear,\n                        }))));\n                    if (key.includes('transform')) {\n                        if (!('transform' in animations)) {\n                            animations.transform = [];\n                        }\n                        (_a = animations.transform) === null || _a === void 0 ? void 0 : _a.push({\n                            [key.split(':')[1]]: animation,\n                        });\n                    }\n                    else {\n                        animations[key] = animation;\n                    }\n                };\n                Object.keys(initialValues).forEach((key) => {\n                    if (key.includes('transform')) {\n                        initialValues[key].forEach((transformProp, index) => {\n                            Object.keys(transformProp).forEach((transformPropKey) => {\n                                addAnimation(index.toString() + '_transform:' + transformPropKey);\n                            });\n                        });\n                    }\n                    else {\n                        addAnimation(key);\n                    }\n                });\n                return {\n                    animations: animations,\n                    initialValues: initialValues,\n                    callback: callback,\n                };\n            };\n        };\n        this.definitions = definitions;\n    }\n    parseDefinitions() {\n        /*\n            Each style property contain an array with all their key points:\n            value, duration of transition to that value, and optional easing function (defaults to Linear)\n        */\n        const parsedKeyframes = {};\n        /*\n          Parsing keyframes 'from' and 'to'.\n        */\n        if (this.definitions.from) {\n            if (this.definitions['0']) {\n                throw Error(\"You cannot provide both keyframe 0 and 'from' as they both specified initial values\");\n            }\n            this.definitions['0'] = this.definitions.from;\n            delete this.definitions.from;\n        }\n        if (this.definitions.to) {\n            if (this.definitions['100']) {\n                throw Error(\"You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.\");\n            }\n            this.definitions['100'] = this.definitions.to;\n            delete this.definitions.to;\n        }\n        /*\n           One of the assumptions is that keyframe  0 is required to properly set initial values.\n           Every other keyframe should contain properties from the set provided as initial values.\n        */\n        if (!this.definitions['0']) {\n            throw Error(\"Please provide 0, or 'from' keyframe with initial state of your object.\");\n        }\n        const initialValues = this.definitions['0'];\n        /*\n          Initialize parsedKeyframes for properties provided in initial keyframe\n        */\n        Object.keys(initialValues).forEach((styleProp) => {\n            var _a;\n            if (styleProp === 'transform') {\n                (_a = initialValues[styleProp]) === null || _a === void 0 ? void 0 : _a.forEach((transformStyle, index) => {\n                    Object.keys(transformStyle).forEach((transformProp) => {\n                        parsedKeyframes[index.toString() + '_transform:' + transformProp] =\n                            [];\n                    });\n                });\n            }\n            else {\n                parsedKeyframes[styleProp] = [];\n            }\n        });\n        const duration = this.durationV ? this.durationV : 500;\n        const animationKeyPoints = Array.from(Object.keys(this.definitions));\n        const getAnimationDuration = (key, currentKeyPoint) => {\n            const maxDuration = (currentKeyPoint / 100) * duration;\n            const currentDuration = parsedKeyframes[key].reduce((acc, value) => acc + value.duration, 0);\n            return maxDuration - currentDuration;\n        };\n        /*\n           Other keyframes can't contain properties that were not specified in initial keyframe.\n        */\n        const addKeyPoint = ({ key, value, currentKeyPoint, easing, }) => {\n            if (!(key in parsedKeyframes)) {\n                throw Error(\"Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')\");\n            }\n            parsedKeyframes[key].push({\n                duration: getAnimationDuration(key, currentKeyPoint),\n                value: value,\n                easing: easing,\n            });\n        };\n        animationKeyPoints\n            .filter((value) => parseInt(value) !== 0)\n            .sort((a, b) => parseInt(a) - parseInt(b))\n            .forEach((keyPoint) => {\n            if (parseInt(keyPoint) < 0 || parseInt(keyPoint) > 100) {\n                throw Error('Keyframe should be in between range 0 - 100.');\n            }\n            const keyframe = this.definitions[keyPoint];\n            const easing = keyframe.easing;\n            delete keyframe.easing;\n            const addKeyPointWith = (key, value) => addKeyPoint({\n                key,\n                value,\n                currentKeyPoint: parseInt(keyPoint),\n                easing,\n            });\n            Object.keys(keyframe).forEach((key) => {\n                var _a;\n                if (key === 'transform') {\n                    (_a = keyframe[key]) === null || _a === void 0 ? void 0 : _a.forEach((transformStyle, index) => {\n                        Object.keys(transformStyle).forEach((transformProp) => {\n                            addKeyPointWith(index.toString() + '_transform:' + transformProp, transformStyle[transformProp]);\n                        });\n                    });\n                }\n                else {\n                    addKeyPointWith(key, keyframe[key]);\n                }\n            });\n        });\n        return { initialValues: initialValues, keyframes: parsedKeyframes };\n    }\n    duration(durationMs) {\n        this.durationV = durationMs;\n        return this;\n    }\n    delay(delayMs) {\n        this.delayV = delayMs;\n        return this;\n    }\n    withCallback(callback) {\n        this.callbackV = callback;\n        return this;\n    }\n    getDelayFunction() {\n        const delay = this.delayV;\n        return delay\n            ? withDelay\n            : (_, animation) => {\n                'worklet';\n                return animation;\n            };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}