{"ast":null,"code":"import { createAnimatedSet as set } from '../core/AnimatedSet';\nimport interpolate from '../derived/interpolate';\nimport InternalAnimatedValue from './InternalAnimatedValue';\nimport { Platform } from 'react-native';\nimport { evaluateOnce } from '../derived/evaluateOnce';\nimport ReanimatedModule from '../../ReanimatedModule';\nimport { val } from '../val';\n\n// Animated value wrapped with extra methods for omit cycle of dependencies\nexport default class AnimatedValue extends InternalAnimatedValue {\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    if (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos') {\n      this._updateValue(val(value));\n    } else {\n      if (ReanimatedModule.setValue && typeof value === 'number') {\n        // FIXME Remove it after some time\n        // For OTA-safety\n        // FIXME handle setting value with a node\n        ReanimatedModule.setValue(this.__nodeID, value);\n      } else {\n        evaluateOnce(set(this, value), this);\n      }\n    }\n  }\n  toString() {\n    return `AnimatedValue, id: ${this.__nodeID}`;\n  }\n  interpolate(config) {\n    return interpolate(this, config);\n  }\n}","map":{"version":3,"names":["createAnimatedSet","set","interpolate","InternalAnimatedValue","Platform","evaluateOnce","ReanimatedModule","val","AnimatedValue","setValue","value","__detachAnimation","_animation","OS","_updateValue","__nodeID","toString","config"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedValue.js"],"sourcesContent":["import { createAnimatedSet as set } from '../core/AnimatedSet';\nimport interpolate from '../derived/interpolate';\nimport InternalAnimatedValue from './InternalAnimatedValue';\nimport { Platform } from 'react-native';\nimport { evaluateOnce } from '../derived/evaluateOnce';\nimport ReanimatedModule from '../../ReanimatedModule';\nimport { val } from '../val';\n\n// Animated value wrapped with extra methods for omit cycle of dependencies\nexport default class AnimatedValue extends InternalAnimatedValue {\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    if (\n      Platform.OS === 'web' ||\n      Platform.OS === 'windows' ||\n      Platform.OS === 'macos'\n    ) {\n      this._updateValue(val(value));\n    } else {\n      if (ReanimatedModule.setValue && typeof value === 'number') {\n        // FIXME Remove it after some time\n        // For OTA-safety\n        // FIXME handle setting value with a node\n        ReanimatedModule.setValue(this.__nodeID, value);\n      } else {\n        evaluateOnce(set(this, value), this);\n      }\n    }\n  }\n\n  toString() {\n    return `AnimatedValue, id: ${this.__nodeID}`;\n  }\n\n  interpolate(config) {\n    return interpolate(this, config);\n  }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,IAAIC,GAAG,QAAQ,qBAAqB;AAC9D,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,YAAY,QAAQ,yBAAyB;AACtD,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,SAASC,GAAG,QAAQ,QAAQ;;AAE5B;AACA,eAAe,MAAMC,aAAa,SAASL,qBAAqB,CAAC;EAC/DM,QAAQ,CAACC,KAAK,EAAE;IACd,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACC,UAAU,CAAC;IACvC,IACER,QAAQ,CAACS,EAAE,KAAK,KAAK,IACrBT,QAAQ,CAACS,EAAE,KAAK,SAAS,IACzBT,QAAQ,CAACS,EAAE,KAAK,OAAO,EACvB;MACA,IAAI,CAACC,YAAY,CAACP,GAAG,CAACG,KAAK,CAAC,CAAC;IAC/B,CAAC,MAAM;MACL,IAAIJ,gBAAgB,CAACG,QAAQ,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;QAC1D;QACA;QACA;QACAJ,gBAAgB,CAACG,QAAQ,CAAC,IAAI,CAACM,QAAQ,EAAEL,KAAK,CAAC;MACjD,CAAC,MAAM;QACLL,YAAY,CAACJ,GAAG,CAAC,IAAI,EAAES,KAAK,CAAC,EAAE,IAAI,CAAC;MACtC;IACF;EACF;EAEAM,QAAQ,GAAG;IACT,OAAQ,sBAAqB,IAAI,CAACD,QAAS,EAAC;EAC9C;EAEAb,WAAW,CAACe,MAAM,EAAE;IAClB,OAAOf,WAAW,CAAC,IAAI,EAAEe,MAAM,CAAC;EAClC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}