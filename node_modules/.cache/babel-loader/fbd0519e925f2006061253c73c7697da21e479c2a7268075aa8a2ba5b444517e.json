{"ast":null,"code":"import { Platform } from 'react-native';\nimport { add, cond, concat, lessThan, multiply, round, sub, proc } from '../base';\nimport AnimatedNode from '../core/AnimatedNode';\nconst procColor = proc(function (r, g, b, a) {\n  const color = add(multiply(a, 1 << 24), multiply(round(r), 1 << 16), multiply(round(g), 1 << 8), round(b));\n  if (Platform.OS === 'android') {\n    // on Android color is represented as signed 32 bit int\n    return cond(lessThan(color, 1 << 31 >>> 0), color, sub(color, Math.pow(2, 32)));\n  }\n  return color;\n});\nexport default function color(r, g, b) {\n  let a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  if (Platform.OS === 'web') {\n    // doesn't support bit shifting\n    return concat('rgba(', r, ',', g, ',', b, ',', a, ')');\n  }\n  if (a instanceof AnimatedNode) {\n    a = round(multiply(a, 255));\n  } else {\n    a = Math.round(a * 255);\n  }\n  return procColor(r, g, b, a);\n}","map":{"version":3,"names":["Platform","add","cond","concat","lessThan","multiply","round","sub","proc","AnimatedNode","procColor","r","g","b","a","color","OS","Math","pow"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/derived/color.js"],"sourcesContent":["import { Platform } from 'react-native';\n\nimport {\n  add,\n  cond,\n  concat,\n  lessThan,\n  multiply,\n  round,\n  sub,\n  proc,\n} from '../base';\nimport AnimatedNode from '../core/AnimatedNode';\n\nconst procColor = proc(function (r, g, b, a) {\n  const color = add(\n    multiply(a, 1 << 24),\n    multiply(round(r), 1 << 16),\n    multiply(round(g), 1 << 8),\n    round(b)\n  );\n\n  if (Platform.OS === 'android') {\n    // on Android color is represented as signed 32 bit int\n    return cond(\n      lessThan(color, (1 << 31) >>> 0),\n      color,\n      sub(color, Math.pow(2, 32))\n    );\n  }\n  return color;\n});\n\nexport default function color(r, g, b, a = 1) {\n  if (Platform.OS === 'web') {\n    // doesn't support bit shifting\n    return concat('rgba(', r, ',', g, ',', b, ',', a, ')');\n  }\n\n  if (a instanceof AnimatedNode) {\n    a = round(multiply(a, 255));\n  } else {\n    a = Math.round(a * 255);\n  }\n\n  return procColor(r, g, b, a);\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,cAAc;AAEvC,SACEC,GAAG,EACHC,IAAI,EACJC,MAAM,EACNC,QAAQ,EACRC,QAAQ,EACRC,KAAK,EACLC,GAAG,EACHC,IAAI,QACC,SAAS;AAChB,OAAOC,YAAY,MAAM,sBAAsB;AAE/C,MAAMC,SAAS,GAAGF,IAAI,CAAC,UAAUG,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC3C,MAAMC,KAAK,GAAGd,GAAG,CACfI,QAAQ,CAACS,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EACpBT,QAAQ,CAACC,KAAK,CAACK,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAC3BN,QAAQ,CAACC,KAAK,CAACM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAC1BN,KAAK,CAACO,CAAC,CAAC,CACT;EAED,IAAIb,QAAQ,CAACgB,EAAE,KAAK,SAAS,EAAE;IAC7B;IACA,OAAOd,IAAI,CACTE,QAAQ,CAACW,KAAK,EAAG,CAAC,IAAI,EAAE,KAAM,CAAC,CAAC,EAChCA,KAAK,EACLR,GAAG,CAACQ,KAAK,EAAEE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAC5B;EACH;EACA,OAAOH,KAAK;AACd,CAAC,CAAC;AAEF,eAAe,SAASA,KAAK,CAACJ,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAS;EAAA,IAAPC,CAAC,uEAAG,CAAC;EAC1C,IAAId,QAAQ,CAACgB,EAAE,KAAK,KAAK,EAAE;IACzB;IACA,OAAOb,MAAM,CAAC,OAAO,EAAEQ,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC;EACxD;EAEA,IAAIA,CAAC,YAAYL,YAAY,EAAE;IAC7BK,CAAC,GAAGR,KAAK,CAACD,QAAQ,CAACS,CAAC,EAAE,GAAG,CAAC,CAAC;EAC7B,CAAC,MAAM;IACLA,CAAC,GAAGG,IAAI,CAACX,KAAK,CAACQ,CAAC,GAAG,GAAG,CAAC;EACzB;EAEA,OAAOJ,SAAS,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}