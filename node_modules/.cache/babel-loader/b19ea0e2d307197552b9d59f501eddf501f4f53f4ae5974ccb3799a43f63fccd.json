{"ast":null,"code":"import { useMemo as $58Phs$useMemo, useEffect as $58Phs$useEffect } from \"react\";\nimport { useMultipleSelectionState as $58Phs$useMultipleSelectionState, SelectionManager as $58Phs$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $58Phs$useCollection } from \"@react-stately/collections\";\nimport $58Phs$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\nimport { useControlledState as $58Phs$useControlledState } from \"@react-stately/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nlet $a02d57049d202695$var$_Symbol_iterator = Symbol.iterator;\nclass $a02d57049d202695$export$d085fb9e920b5ca7 {\n  *[$a02d57049d202695$var$_Symbol_iterator]() {\n    yield* this.iterable;\n  }\n  get size() {\n    return this.keyMap.size;\n  }\n  getKeys() {\n    return this.keyMap.keys();\n  }\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n  getFirstKey() {\n    return this.firstKey;\n  }\n  getLastKey() {\n    return this.lastKey;\n  }\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n  constructor(nodes) {\n    (0, $58Phs$swchelperssrc_define_propertymjs)(this, \"keyMap\", new Map());\n    this.iterable = nodes;\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n      if (node.childNodes && node.type === \"section\") for (let child of node.childNodes) visit(child);\n    };\n    for (let node of nodes) visit(node);\n    let last;\n    let index = 0;\n    for (let [key, node1] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n      if (node1.type === \"item\") node1.index = index++;\n      last = node1;\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n}\nfunction $e72dd72e1c76a225$export$2f645645f7bca764(props) {\n  let {\n    filter: filter\n  } = props;\n  let selectionState = (0, $58Phs$useMultipleSelectionState)(props);\n  let disabledKeys = (0, $58Phs$useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let factory = nodes => filter ? new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(filter(nodes)) : new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(nodes);\n  let context = (0, $58Phs$useMemo)(() => ({\n    suppressTextValueWarning: props.suppressTextValueWarning\n  }), [props.suppressTextValueWarning]);\n  let collection = (0, $58Phs$useCollection)(props, factory, context, [filter]);\n  // Reset focused key if that item is deleted from the collection.\n  (0, $58Phs$useEffect)(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collection, selectionState.focusedKey]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: new (0, $58Phs$SelectionManager)(collection, selectionState)\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {\n  var _props_defaultSelectedKey;\n  let [selectedKey, setSelectedKey] = (0, $58Phs$useControlledState)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange);\n  let selectedKeys = (0, $58Phs$useMemo)(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = (0, $e72dd72e1c76a225$export$2f645645f7bca764)({\n    ...props,\n    selectionMode: \"single\",\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys: selectedKeys,\n    onSelectionChange: keys => {\n      let key = keys.values().next().value;\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);\n      setSelectedKey(key);\n    }\n  });\n  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    setSelectedKey: setSelectedKey,\n    selectedItem: selectedItem\n  };\n}\nexport { $e72dd72e1c76a225$export$2f645645f7bca764 as useListState, $a0d645289fe9b86b$export$e7f05e985daf4b5f as useSingleSelectListState, $a02d57049d202695$export$d085fb9e920b5ca7 as ListCollection };","map":{"version":3,"mappings":"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","names":["$a02d57049d202695$var$_Symbol_iterator","iterator","$a02d57049d202695$export$d085fb9e920b5ca7","iterable","size","keyMap","getKeys","keys","getKeyBefore","key","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","firstKey","getLastKey","lastKey","getItem","at","idx","constructor","nodes","Map","visit","set","childNodes","type","child","last","index","node1","undefined","$e72dd72e1c76a225$export$2f645645f7bca764","props","filter","selectionState","disabledKeys","Set","factory","context","suppressTextValueWarning","collection","focusedKey","setFocusedKey","selectionManager","$a0d645289fe9b86b$export$e7f05e985daf4b5f","_props_defaultSelectedKey","selectedKey","setSelectedKey","defaultSelectedKey","onSelectionChange","selectedKeys","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","values","next","value","selectedItem"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\index.ts","C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\useListState.ts","C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\ListCollection.ts","C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\useSingleSelectListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {ListProps, ListState} from './useListState';\nexport type {SingleSelectListProps, SingleSelectListState} from './useSingleSelectListState';\nexport {useListState} from './useListState';\nexport {useSingleSelectListState} from './useSingleSelectListState';\nexport {ListCollection} from './ListCollection';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {ListCollection} from './ListCollection';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionBase<T>, MultipleSelectionStateProps {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let {filter} = props;\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let factory = nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes as Iterable<Node<T>>);\n  let context = useMemo(() => ({suppressTextValueWarning: props.suppressTextValueWarning}), [props.suppressTextValueWarning]);\n\n  let collection = useCollection(props, factory, context, [filter]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ListCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>) {\n    this.iterable = nodes;\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, SingleSelection} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListState, useListState} from './useListState';\nimport {Node} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface SingleSelectListProps<T> extends CollectionBase<T>, Omit<SingleSelection, 'disallowEmptySelection'> {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}