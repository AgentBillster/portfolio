{"ast":null,"code":"import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => (a % b + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n  abs: single(a => Math.abs(a)),\n  ceil: single(a => Math.ceil(a)),\n  floor: single(a => Math.floor(a)),\n  max: reduce((a, b) => Math.max(a, b)),\n  min: reduce((a, b) => Math.min(a, b)),\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b)\n};\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n  constructor(operator, input) {\n    invariant(typeof operator === 'string', `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`);\n    invariant(input.every(el => el instanceof AnimatedNode || typeof el === 'string' || typeof el === 'number'), `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`);\n    super({\n      type: 'op',\n      op: operator,\n      input\n    }, input);\n    this._op = operator;\n    this._input = input;\n  }\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\nexport function createAnimatedOperator(name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new AnimatedOperator(name, args.map(adapt));\n  };\n}","map":{"version":3,"names":["AnimatedNode","val","invariant","adapt","reduce","fn","input","a","b","reduceFrom","initialValue","infix","single","OPERATIONS","add","sub","multiply","divide","pow","Math","modulo","sqrt","log","sin","cos","tan","acos","asin","atan","exp","round","abs","ceil","floor","max","min","and","or","not","defined","undefined","isNaN","lessThan","eq","greaterThan","lessOrEq","greaterOrEq","neq","AnimatedOperator","_input","_op","_operation","constructor","operator","every","el","type","op","toString","__nodeID","__onEvaluate","createAnimatedOperator","name","args","map"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedOperator.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return (input) => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return (input) => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return (input) => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return (input) => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single((a) => Math.sqrt(a)),\n  log: single((a) => Math.log(a)),\n  sin: single((a) => Math.sin(a)),\n  cos: single((a) => Math.cos(a)),\n  tan: single((a) => Math.tan(a)),\n  acos: single((a) => Math.acos(a)),\n  asin: single((a) => Math.asin(a)),\n  atan: single((a) => Math.atan(a)),\n  exp: single((a) => Math.exp(a)),\n  round: single((a) => Math.round(a)),\n  abs: single((a) => Math.abs(a)),\n  ceil: single((a) => Math.ceil(a)),\n  floor: single((a) => Math.floor(a)),\n  max: reduce((a, b) => Math.max(a, b)),\n  min: reduce((a, b) => Math.min(a, b)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single((a) => !a),\n  defined: single((a) => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(\n      typeof operator === 'string',\n      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`\n    );\n    invariant(\n      input.every(\n        (el) =>\n          el instanceof AnimatedNode ||\n          typeof el === 'string' ||\n          typeof el === 'number'\n      ),\n      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`\n    );\n    super({ type: 'op', op: operator, input }, input);\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,gBAAgB;AACzC,SAASC,GAAG,QAAQ,QAAQ;AAE5B,OAAOC,SAAS,MAAM,WAAW;AACjC,SAASC,KAAK,QAAQ,uBAAuB;AAE7C,SAASC,MAAM,CAACC,EAAE,EAAE;EAClB,OAAQC,KAAK,IAAKA,KAAK,CAACF,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKH,EAAE,CAACJ,GAAG,CAACM,CAAC,CAAC,EAAEN,GAAG,CAACO,CAAC,CAAC,CAAC,CAAC;AAC9D;AAEA,SAASC,UAAU,CAACJ,EAAE,EAAEK,YAAY,EAAE;EACpC,OAAQJ,KAAK,IAAKA,KAAK,CAACF,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKH,EAAE,CAACJ,GAAG,CAACM,CAAC,CAAC,EAAEN,GAAG,CAACO,CAAC,CAAC,CAAC,EAAEE,YAAY,CAAC;AAC5E;AAEA,SAASC,KAAK,CAACN,EAAE,EAAE;EACjB,OAAQC,KAAK,IAAKD,EAAE,CAACJ,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEL,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD;AAEA,SAASM,MAAM,CAACP,EAAE,EAAE;EAClB,OAAQC,KAAK,IAAKD,EAAE,CAACJ,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC;AAEA,MAAMO,UAAU,GAAG;EACjB;EACAC,GAAG,EAAEV,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAC5BO,GAAG,EAAEX,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAC5BQ,QAAQ,EAAEZ,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EACjCS,MAAM,EAAEb,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAC/BU,GAAG,EAAEd,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKW,IAAI,CAACD,GAAG,CAACX,CAAC,EAAEC,CAAC,CAAC,CAAC;EACrCY,MAAM,EAAEhB,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAK,CAAED,CAAC,GAAGC,CAAC,GAAIA,CAAC,IAAIA,CAAC,CAAC;EAC3Ca,IAAI,EAAET,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACE,IAAI,CAACd,CAAC,CAAC,CAAC;EACjCe,GAAG,EAAEV,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACG,GAAG,CAACf,CAAC,CAAC,CAAC;EAC/BgB,GAAG,EAAEX,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACI,GAAG,CAAChB,CAAC,CAAC,CAAC;EAC/BiB,GAAG,EAAEZ,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACK,GAAG,CAACjB,CAAC,CAAC,CAAC;EAC/BkB,GAAG,EAAEb,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACM,GAAG,CAAClB,CAAC,CAAC,CAAC;EAC/BmB,IAAI,EAAEd,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACO,IAAI,CAACnB,CAAC,CAAC,CAAC;EACjCoB,IAAI,EAAEf,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACQ,IAAI,CAACpB,CAAC,CAAC,CAAC;EACjCqB,IAAI,EAAEhB,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACS,IAAI,CAACrB,CAAC,CAAC,CAAC;EACjCsB,GAAG,EAAEjB,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACU,GAAG,CAACtB,CAAC,CAAC,CAAC;EAC/BuB,KAAK,EAAElB,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACW,KAAK,CAACvB,CAAC,CAAC,CAAC;EACnCwB,GAAG,EAAEnB,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACY,GAAG,CAACxB,CAAC,CAAC,CAAC;EAC/ByB,IAAI,EAAEpB,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACa,IAAI,CAACzB,CAAC,CAAC,CAAC;EACjC0B,KAAK,EAAErB,MAAM,CAAEL,CAAC,IAAKY,IAAI,CAACc,KAAK,CAAC1B,CAAC,CAAC,CAAC;EACnC2B,GAAG,EAAE9B,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKW,IAAI,CAACe,GAAG,CAAC3B,CAAC,EAAEC,CAAC,CAAC,CAAC;EACrC2B,GAAG,EAAE/B,MAAM,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKW,IAAI,CAACgB,GAAG,CAAC5B,CAAC,EAAEC,CAAC,CAAC,CAAC;EAErC;EACA4B,GAAG,EAAE3B,UAAU,CAAC,CAACF,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAIC,CAAC,EAAE,IAAI,CAAC;EACvC6B,EAAE,EAAE5B,UAAU,CAAC,CAACF,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAIC,CAAC,EAAE,KAAK,CAAC;EACvC8B,GAAG,EAAE1B,MAAM,CAAEL,CAAC,IAAK,CAACA,CAAC,CAAC;EACtBgC,OAAO,EAAE3B,MAAM,CAAEL,CAAC,IAAKA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAKiC,SAAS,IAAI,CAACC,KAAK,CAAClC,CAAC,CAAC,CAAC;EAElE;EACAmC,QAAQ,EAAE/B,KAAK,CAAC,CAACJ,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAChC;EACAmC,EAAE,EAAEhC,KAAK,CAAC,CAACJ,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAIC,CAAC,CAAC;EAC3BoC,WAAW,EAAEjC,KAAK,CAAC,CAACJ,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EACnCqC,QAAQ,EAAElC,KAAK,CAAC,CAACJ,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAIC,CAAC,CAAC;EACjCsC,WAAW,EAAEnC,KAAK,CAAC,CAACJ,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAIC,CAAC,CAAC;EACpC;EACAuC,GAAG,EAAEpC,KAAK,CAAC,CAACJ,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAIC,CAAC;AAC7B,CAAC;AAED,MAAMwC,gBAAgB,SAAShD,YAAY,CAAC;EAC1CiD,MAAM;EACNC,GAAG;EACHC,UAAU;EAEVC,WAAW,CAACC,QAAQ,EAAE/C,KAAK,EAAE;IAC3BJ,SAAS,CACP,OAAOmD,QAAQ,KAAK,QAAQ,EAC3B,wFAAuFA,QAAS,EAAC,CACnG;IACDnD,SAAS,CACPI,KAAK,CAACgD,KAAK,CACRC,EAAE,IACDA,EAAE,YAAYvD,YAAY,IAC1B,OAAOuD,EAAE,KAAK,QAAQ,IACtB,OAAOA,EAAE,KAAK,QAAQ,CACzB,EACA,2HAA0HjD,KAAM,EAAC,CACnI;IACD,KAAK,CAAC;MAAEkD,IAAI,EAAE,IAAI;MAAEC,EAAE,EAAEJ,QAAQ;MAAE/C;IAAM,CAAC,EAAEA,KAAK,CAAC;IACjD,IAAI,CAAC4C,GAAG,GAAGG,QAAQ;IACnB,IAAI,CAACJ,MAAM,GAAG3C,KAAK;EACrB;EAEAoD,QAAQ,GAAG;IACT,OAAQ,yBAAwB,IAAI,CAACC,QAAS,EAAC;EACjD;EAEAC,YAAY,GAAG;IACb,IAAI,CAAC,IAAI,CAACT,UAAU,EAAE;MACpB,IAAI,CAACA,UAAU,GAAGtC,UAAU,CAAC,IAAI,CAACqC,GAAG,CAAC;MACtChD,SAAS,CAAC,IAAI,CAACiD,UAAU,EAAG,uBAAsB,EAAE,IAAI,CAACD,GAAG,CAAC;IAC/D;IACA,OAAO,IAAI,CAACC,UAAU,CAAC,IAAI,CAACF,MAAM,CAAC;EACrC;AACF;AAEA,OAAO,SAASY,sBAAsB,CAACC,IAAI,EAAE;EAC3C,OAAO;IAAA,kCAAIC,IAAI;MAAJA,IAAI;IAAA;IAAA,OAAK,IAAIf,gBAAgB,CAACc,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC7D,KAAK,CAAC,CAAC;EAAA;AACjE"},"metadata":{},"sourceType":"module","externalDependencies":[]}