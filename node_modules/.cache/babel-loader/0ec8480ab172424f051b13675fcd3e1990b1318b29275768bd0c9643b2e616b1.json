{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Component } from 'react';\nimport GenericTouchable, { TOUCHABLE_STATE } from './GenericTouchable';\nimport { StyleSheet, View } from 'react-native';\n\n/**\n * TouchableHighlight follows RN's implementation\n */\nexport default class TouchableHighlight extends Component {\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"showUnderlay\", () => {\n      var _this$props$onShowUnd, _this$props;\n      if (!this.hasPressHandler()) {\n        return;\n      }\n      this.setState({\n        extraChildStyle: {\n          opacity: this.props.activeOpacity\n        },\n        extraUnderlayStyle: {\n          backgroundColor: this.props.underlayColor\n        }\n      });\n      (_this$props$onShowUnd = (_this$props = this.props).onShowUnderlay) === null || _this$props$onShowUnd === void 0 ? void 0 : _this$props$onShowUnd.call(_this$props);\n    });\n    _defineProperty(this, \"hasPressHandler\", () => this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);\n    _defineProperty(this, \"hideUnderlay\", () => {\n      var _this$props$onHideUnd, _this$props2;\n      this.setState({\n        extraChildStyle: null,\n        extraUnderlayStyle: null\n      });\n      (_this$props$onHideUnd = (_this$props2 = this.props).onHideUnderlay) === null || _this$props$onHideUnd === void 0 ? void 0 : _this$props$onHideUnd.call(_this$props2);\n    });\n    _defineProperty(this, \"onStateChange\", (_from, to) => {\n      if (to === TOUCHABLE_STATE.BEGAN) {\n        this.showUnderlay();\n      } else if (to === TOUCHABLE_STATE.UNDETERMINED || to === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        this.hideUnderlay();\n      }\n    });\n    this.state = {\n      extraChildStyle: null,\n      extraUnderlayStyle: null\n    };\n  } // Copied from RN\n\n  renderChildren() {\n    if (!this.props.children) {\n      return /*#__PURE__*/React.createElement(View, null);\n    }\n    const child = React.Children.only(this.props.children); // TODO: not sure if OK but fixes error\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)\n    });\n  }\n  render() {\n    const {\n      style = {},\n      ...rest\n    } = this.props;\n    const {\n      extraUnderlayStyle\n    } = this.state;\n    return /*#__PURE__*/React.createElement(GenericTouchable, _extends({}, rest, {\n      style: [style, extraUnderlayStyle],\n      onStateChange: this.onStateChange\n    }), this.renderChildren());\n  }\n}\n_defineProperty(TouchableHighlight, \"defaultProps\", {\n  ...GenericTouchable.defaultProps,\n  activeOpacity: 0.85,\n  delayPressOut: 100,\n  underlayColor: 'black'\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,IAEEC,eAFF,QAGO,oBAHP;AAIA,SACEC,UADF,EAEEC,IAFF,QAMO,cANP;;AAiBA;AACA;AACA;AACA,eAAe,MAAMC,kBAAN,SAAiCL,SAAjC,CAGb;EAQAM,WAAW,CAACC,KAAD,EAAyD;IAClE,MAAMA,KAAN;IADkEC,sCASrD,MAAM;MAAA;MACnB,IAAI,CAAC,KAAKC,eAAL,EAAL,EAA6B;QAC3B;MACD;MACD,KAAKC,QAAL,CAAc;QACZC,eAAe,EAAE;UACfC,OAAO,EAAE,KAAKL,KAAL,CAAWM;QADL,CADL;QAIZC,kBAAkB,EAAE;UAClBC,eAAe,EAAE,KAAKR,KAAL,CAAWS;QADV;MAJR,CAAd;MAQA,6CAAKT,KAAL,EAAWU,cAAX;IACD,CAtBmE;IAAAT,yCAwBlD,MAChB,KAAKD,KAAL,CAAWW,OAAX,IACA,KAAKX,KAAL,CAAWY,SADX,IAEA,KAAKZ,KAAL,CAAWa,UAFX,IAGA,KAAKb,KAAL,CAAWc,WA5BuD;IAAAb,sCA8BrD,MAAM;MAAA;MACnB,KAAKE,QAAL,CAAc;QACZC,eAAe,EAAE,IADL;QAEZG,kBAAkB,EAAE;MAFR,CAAd;MAIA,8CAAKP,KAAL,EAAWe,cAAX;IACD,CApCmE;IAAAd,uCAmDpD,CAACe,KAAD,EAAgBC,EAAhB,KAA+B;MAC7C,IAAIA,EAAE,KAAKtB,eAAe,CAACuB,KAA3B,EAAkC;QAChC,KAAKC,YAAL;MACD,CAFD,MAEO,IACLF,EAAE,KAAKtB,eAAe,CAACyB,YAAvB,IACAH,EAAE,KAAKtB,eAAe,CAAC0B,aAFlB,EAGL;QACA,KAAKC,YAAL;MACD;IACF,CA5DmE;IAElE,KAAKC,KAAL,GAAa;MACXnB,eAAe,EAAE,IADN;MAEXG,kBAAkB,EAAE;IAFT,CAAb;EAID,CAdD,CAgBA;;EA8BAiB,cAAc,GAAG;IACf,IAAI,CAAC,KAAKxB,KAAL,CAAWyB,QAAhB,EAA0B;MACxB,oBAAOjC,oBAACK,IAAD,OAAP;IACD;IAED,MAAM6B,KAAK,GAAGlC,KAAK,CAACmC,QAAN,CAAeC,IAAf,CACZ,KAAK5B,KAAL,CAAWyB,QADC,CAAd,CALe,CAOqB;;IACpC,oBAAOjC,KAAK,CAACqC,YAAN,CAAmBH,KAAnB,EAA0B;MAC/BI,KAAK,EAAElC,UAAU,CAACmC,OAAX,CAAmBL,KAAK,CAAC1B,KAAN,CAAY8B,KAA/B,EAAsC,KAAKP,KAAL,CAAWnB,eAAjD;IADwB,CAA1B,CAAP;EAGD;EAaD4B,MAAM,GAAG;IACP,MAAM;MAAEF,KAAK,GAAG,EAAV;MAAc,GAAGG;IAAjB,IAA0B,KAAKjC,KAArC;IACA,MAAM;MAAEO;IAAF,IAAyB,KAAKgB,KAApC;IACA,oBACE/B,oBAACE,gBAAD,eACMuC,IADN;MAEEH,KAAK,EAAE,CAACA,KAAD,EAAQvB,kBAAR,CAFT;MAGE2B,aAAa,EAAE,KAAKA;IAHtB,IAIG,KAAKV,cAAL,EAJH,CADF;EAQD;AAjFD;gBAHmB1B,kB,kBAIG;EACpB,GAAGJ,gBAAgB,CAACyC,YADA;EAEpB7B,aAAa,EAAE,IAFK;EAGpB8B,aAAa,EAAE,GAHK;EAIpB3B,aAAa,EAAE;AAJK,C","names":["React","Component","GenericTouchable","TOUCHABLE_STATE","StyleSheet","View","TouchableHighlight","constructor","props","_defineProperty","hasPressHandler","setState","extraChildStyle","opacity","activeOpacity","extraUnderlayStyle","backgroundColor","underlayColor","onShowUnderlay","onPress","onPressIn","onPressOut","onLongPress","onHideUnderlay","_from","to","BEGAN","showUnderlay","UNDETERMINED","MOVED_OUTSIDE","hideUnderlay","state","renderChildren","children","child","Children","only","cloneElement","style","compose","render","rest","onStateChange","defaultProps","delayPressOut"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\touchables\\TouchableHighlight.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport GenericTouchable, {\n  GenericTouchableProps,\n  TOUCHABLE_STATE,\n} from './GenericTouchable';\nimport {\n  StyleSheet,\n  View,\n  TouchableHighlightProps,\n  ColorValue,\n  ViewProps,\n} from 'react-native';\n\ninterface State {\n  extraChildStyle: null | {\n    opacity?: number;\n  };\n  extraUnderlayStyle: null | {\n    backgroundColor?: ColorValue;\n  };\n}\n\n/**\n * TouchableHighlight follows RN's implementation\n */\nexport default class TouchableHighlight extends Component<\n  TouchableHighlightProps & GenericTouchableProps,\n  State\n> {\n  static defaultProps = {\n    ...GenericTouchable.defaultProps,\n    activeOpacity: 0.85,\n    delayPressOut: 100,\n    underlayColor: 'black',\n  };\n\n  constructor(props: TouchableHighlightProps & GenericTouchableProps) {\n    super(props);\n    this.state = {\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    };\n  }\n\n  // Copied from RN\n  showUnderlay = () => {\n    if (!this.hasPressHandler()) {\n      return;\n    }\n    this.setState({\n      extraChildStyle: {\n        opacity: this.props.activeOpacity,\n      },\n      extraUnderlayStyle: {\n        backgroundColor: this.props.underlayColor,\n      },\n    });\n    this.props.onShowUnderlay?.();\n  };\n\n  hasPressHandler = () =>\n    this.props.onPress ||\n    this.props.onPressIn ||\n    this.props.onPressOut ||\n    this.props.onLongPress;\n\n  hideUnderlay = () => {\n    this.setState({\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    });\n    this.props.onHideUnderlay?.();\n  };\n\n  renderChildren() {\n    if (!this.props.children) {\n      return <View />;\n    }\n\n    const child = React.Children.only(\n      this.props.children\n    ) as React.ReactElement<ViewProps>; // TODO: not sure if OK but fixes error\n    return React.cloneElement(child, {\n      style: StyleSheet.compose(child.props.style, this.state.extraChildStyle),\n    });\n  }\n\n  onStateChange = (_from: number, to: number) => {\n    if (to === TOUCHABLE_STATE.BEGAN) {\n      this.showUnderlay();\n    } else if (\n      to === TOUCHABLE_STATE.UNDETERMINED ||\n      to === TOUCHABLE_STATE.MOVED_OUTSIDE\n    ) {\n      this.hideUnderlay();\n    }\n  };\n\n  render() {\n    const { style = {}, ...rest } = this.props;\n    const { extraUnderlayStyle } = this.state;\n    return (\n      <GenericTouchable\n        {...rest}\n        style={[style, extraUnderlayStyle]}\n        onStateChange={this.onStateChange}>\n        {this.renderChildren()}\n      </GenericTouchable>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}