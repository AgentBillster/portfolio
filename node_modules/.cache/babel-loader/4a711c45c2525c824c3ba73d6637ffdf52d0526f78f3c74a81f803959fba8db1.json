{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Hammer from '@egjs/hammerjs';\nimport { State } from '../State';\nimport { CONTENT_TOUCHES_DELAY, CONTENT_TOUCHES_QUICK_TAP_END_DELAY } from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { fireAfterInterval, isValidNumber, isnan } from './utils';\nclass PressGestureHandler extends DiscreteGestureHandler {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"visualFeedbackTimer\", void 0);\n    _defineProperty(this, \"initialEvent\", null);\n    _defineProperty(this, \"shouldDelayTouches\", true);\n  }\n  get name() {\n    return 'press';\n  }\n  get minDurationMs() {\n    // @ts-ignore FIXME(TS)\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n  simulateCancelEvent(inputData) {\n    // Long press never starts so we can't rely on the running event boolean.\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n  updateHasCustomActivationCriteria(_ref) {\n    let {\n      shouldCancelWhenOutside,\n      maxDistSq\n    } = _ref;\n    return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n  }\n  getState(type) {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED\n    }[type];\n  }\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10\n      };\n    }\n    return this.config;\n  }\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs\n    };\n  }\n  onGestureActivated(ev) {\n    this.onGestureStart(ev);\n  }\n  shouldDelayTouchForEvent(_ref2) {\n    let {\n      pointerType\n    } = _ref2;\n    // Don't disable event for mouse input\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n  onGestureStart(ev) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n  sendGestureStartedEvent(ev) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent({\n      ...ev,\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true\n    });\n  }\n  forceInvalidate(event) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (this.isGestureRunning) {\n      if (ev.isFinal) {\n        let timeout;\n        if (this.visualFeedbackTimer) {\n          // Aesthetic timing for a quick tap.\n          // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n          // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n          timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n          this.sendGestureStartedEvent(this.initialEvent);\n          this.initialEvent = null;\n        }\n        fireAfterInterval(() => {\n          this.sendEvent({\n            ...ev,\n            eventType: Hammer.INPUT_END,\n            isFinal: true\n          }); // @ts-ignore -- this should explicitly support undefined\n\n          this.onGestureEnded();\n        }, timeout);\n      } else {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_MOVE,\n          isFinal: false\n        });\n      }\n    }\n  }\n  updateGestureConfig(_ref3) {\n    let {\n      shouldActivateOnStart = false,\n      disallowInterruption = false,\n      shouldCancelWhenOutside = true,\n      minDurationMs = Number.NaN,\n      maxDist = Number.NaN,\n      minPointers = 1,\n      maxPointers = 1,\n      ...props\n    } = _ref3;\n    return super.updateGestureConfig({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props\n    });\n  }\n}\nexport default PressGestureHandler;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,SACEC,qBADF,EAEEC,mCAFF,QAIO,aAJP;AAKA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,SAASC,iBAAT,EAA4BC,aAA5B,EAA2CC,KAA3C,QAAwD,SAAxD;AAEA,MAAMC,mBAAN,SAAkCJ,sBAAlC,CAAyD;EAAAK;IAAA;IAAAC;IAAAA,sCAET,IAFS;IAAAA,4CAoBlC,IApBkC;EAAA;EAG/C,IAAJC,IAAI,GAAG;IACT,OAAO,OAAP;EACD;EAEgB,IAAbC,aAAa,GAAG;IAClB;IACA,OAAOL,KAAK,CAAC,KAAKM,MAAL,CAAYD,aAAb,CAAL,GAAmC,CAAnC,GAAuC,KAAKC,MAAL,CAAYD,aAA1D;EACD;EAEU,IAAPE,OAAO,GAAG;IACZ,OAAOP,KAAK,CAAC,KAAKM,MAAL,CAAYC,OAAb,CAAL,GAA6B,CAA7B,GAAiC,KAAKD,MAAL,CAAYC,OAApD;EACD;EAEqB,IAAlBC,kBAAkB,GAAG;IACvB,OAAOf,MAAM,CAACgB,KAAd;EACD;EAIDC,mBAAmB,CAACC,SAAD,EAA4B;IAC7C;IACA,KAAKC,gBAAL,GAAwB,IAAxB;IACA,KAAKC,WAAL,CAAiBF,SAAjB;EACD;EAEDG,iCAAiC,OAGiB;IAAA,IAHhB;MAChCC,uBADgC;MAEhCC;IAFgC,CAAD;IAI/B,OAAOD,uBAAuB,IAAI,CAAChB,aAAa,CAACiB,SAAD,CAAhD;EACD;EAEDC,QAAQ,CAACC,IAAD,EAA6C;IACnD,OAAO;MACL,CAACzB,MAAM,CAAC0B,WAAR,GAAsBzB,KAAK,CAAC0B,KADvB;MAEL,CAAC3B,MAAM,CAAC4B,UAAR,GAAqB3B,KAAK,CAAC4B,MAFtB;MAGL,CAAC7B,MAAM,CAAC8B,SAAR,GAAoB7B,KAAK,CAAC8B,GAHrB;MAIL,CAAC/B,MAAM,CAACgC,YAAR,GAAuB/B,KAAK,CAACgC;IAJxB,EAKLR,IALK,CAAP;EAMD;EAEDS,SAAS,GAAG;IACV,IAAI,CAAC,KAAKC,2BAAV,EAAuC;MACrC;MACA;MACA,OAAO;QACLb,uBAAuB,EAAE,IADpB;QAELC,SAAS,EAAE;MAFN,CAAP;IAID;IACD,OAAO,KAAKV,MAAZ;EACD;EAEDuB,eAAe,GAAG;IAChB,OAAO;MACL,GAAG,MAAMA,eAAN,EADE;MAEL;MACAC,IAAI,EAAE,KAAKzB;IAHN,CAAP;EAKD;EAED0B,kBAAkB,CAACC,EAAD,EAAqB;IACrC,KAAKC,cAAL,CAAoBD,EAApB;EACD;EAEDE,wBAAwB,QAAkC;IAAA,IAAjC;MAAEC;IAAF,CAAD;IACtB;IACA,OAAO,KAAKC,kBAAL,IAA2BD,WAAW,KAAK,OAAlD;EACD;EAEDF,cAAc,CAACD,EAAD,EAAqB;IACjC,KAAKK,gBAAL,GAAwB,IAAxB;IACAC,YAAY,CAAC,KAAKC,mBAAN,CAAZ;IACA,KAAKC,YAAL,GAAoBR,EAApB;IACA,KAAKO,mBAAL,GAA2BzC,iBAAiB,CAAC,MAAM;MACjD,KAAK2C,uBAAL,CAA6B,KAAKD,YAAlC;MACA,KAAKA,YAAL,GAAoB,IAApB;IACD,CAH2C,EAGzC,KAAKN,wBAAL,CAA8BF,EAA9B,KAAqCrC,qBAHI,CAA5C;EAID;EAED8C,uBAAuB,CAACT,EAAD,EAAqB;IAC1CM,YAAY,CAAC,KAAKC,mBAAN,CAAZ;IACA,KAAKA,mBAAL,GAA2B,IAA3B;IACA,KAAKG,SAAL,CAAe;MACb,GAAGV,EADU;MAEbW,SAAS,EAAElD,MAAM,CAAC4B,UAFL;MAGbuB,OAAO,EAAE;IAHI,CAAf;EAKD;EAEDC,eAAe,CAACC,KAAD,EAAwB;IACrC,MAAMD,eAAN,CAAsBC,KAAtB;IACAR,YAAY,CAAC,KAAKC,mBAAN,CAAZ;IACA,KAAKA,mBAAL,GAA2B,IAA3B;IACA,KAAKC,YAAL,GAAoB,IAApB;EACD;EAEDO,UAAU,CAACf,EAAD,EAAqB;IAC7B,MAAMe,UAAN,CAAiBf,EAAjB;IACA,IAAI,KAAKK,gBAAT,EAA2B;MACzB,IAAIL,EAAE,CAACgB,OAAP,EAAgB;QACd,IAAIC,OAAJ;QACA,IAAI,KAAKV,mBAAT,EAA8B;UAC5B;UACA;UACA;UACAU,OAAO,GAAGrD,mCAAV;UACA,KAAK6C,uBAAL,CAA6B,KAAKD,YAAlC;UACA,KAAKA,YAAL,GAAoB,IAApB;QACD;QACD1C,iBAAiB,CAAC,MAAM;UACtB,KAAK4C,SAAL,CAAe;YACb,GAAGV,EADU;YAEbW,SAAS,EAAElD,MAAM,CAAC8B,SAFL;YAGbyB,OAAO,EAAE;UAHI,CAAf,EADsB,CAMtB;;UACA,KAAKE,cAAL;QACD,CARgB,EAQdD,OARc,CAAjB;MASD,CAnBD,MAmBO;QACL,KAAKP,SAAL,CAAe;UACb,GAAGV,EADU;UAEbW,SAAS,EAAElD,MAAM,CAAC4B,UAFL;UAGb2B,OAAO,EAAE;QAHI,CAAf;MAKD;IACF;EACF;EAEDG,mBAAmB,QAShB;IAAA,IATiB;MAClBC,qBAAqB,GAAG,KADN;MAElBC,oBAAoB,GAAG,KAFL;MAGlBtC,uBAAuB,GAAG,IAHR;MAIlBV,aAAa,GAAGiD,MAAM,CAACC,GAJL;MAKlBhD,OAAO,GAAG+C,MAAM,CAACC,GALC;MAMlBC,WAAW,GAAG,CANI;MAOlBC,WAAW,GAAG,CAPI;MAQlB,GAAGC;IARe,CAAD;IAUjB,OAAO,MAAMP,mBAAN,CAA0B;MAC/BC,qBAD+B;MAE/BC,oBAF+B;MAG/BtC,uBAH+B;MAI/BV,aAJ+B;MAK/BE,OAL+B;MAM/BiD,WAN+B;MAO/BC,WAP+B;MAQ/B,GAAGC;IAR4B,CAA1B,CAAP;EAUD;AAxJsD;AA0JzD,eAAezD,mBAAf","names":["Hammer","State","CONTENT_TOUCHES_DELAY","CONTENT_TOUCHES_QUICK_TAP_END_DELAY","DiscreteGestureHandler","fireAfterInterval","isValidNumber","isnan","PressGestureHandler","constructor","_defineProperty","name","minDurationMs","config","maxDist","NativeGestureClass","Press","simulateCancelEvent","inputData","hasGestureFailed","cancelEvent","updateHasCustomActivationCriteria","shouldCancelWhenOutside","maxDistSq","getState","type","INPUT_START","BEGAN","INPUT_MOVE","ACTIVE","INPUT_END","END","INPUT_CANCEL","CANCELLED","getConfig","hasCustomActivationCriteria","getHammerConfig","time","onGestureActivated","ev","onGestureStart","shouldDelayTouchForEvent","pointerType","shouldDelayTouches","isGestureRunning","clearTimeout","visualFeedbackTimer","initialEvent","sendGestureStartedEvent","sendEvent","eventType","isFirst","forceInvalidate","event","onRawEvent","isFinal","timeout","onGestureEnded","updateGestureConfig","shouldActivateOnStart","disallowInterruption","Number","NaN","minPointers","maxPointers","props"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\react-native-gesture-handler\\lib\\module\\web_hammer\\PressGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport { State } from '../State';\nimport {\n  CONTENT_TOUCHES_DELAY,\n  CONTENT_TOUCHES_QUICK_TAP_END_DELAY,\n  HammerInputNames,\n} from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { Config, HammerInputExt } from './GestureHandler';\nimport { fireAfterInterval, isValidNumber, isnan } from './utils';\n\nclass PressGestureHandler extends DiscreteGestureHandler {\n  private visualFeedbackTimer: any;\n  private initialEvent: HammerInputExt | null = null;\n  get name() {\n    return 'press';\n  }\n\n  get minDurationMs() {\n    // @ts-ignore FIXME(TS)\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n\n  shouldDelayTouches = true;\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    // Long press never starts so we can't rely on the running event boolean.\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n\n  updateHasCustomActivationCriteria({\n    shouldCancelWhenOutside,\n    maxDistSq,\n  }: Config & { shouldCancelWhenOutside: boolean }) {\n    return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n  }\n\n  getState(type: keyof typeof HammerInputNames): State {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED,\n    }[type];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.onGestureStart(ev);\n  }\n\n  shouldDelayTouchForEvent({ pointerType }: HammerInputExt) {\n    // Don't disable event for mouse input\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n\n  onGestureStart(ev: HammerInputExt) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n\n  sendGestureStartedEvent(ev: HammerInputExt) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent({\n      ...ev,\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true,\n    });\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.isGestureRunning) {\n      if (ev.isFinal) {\n        let timeout;\n        if (this.visualFeedbackTimer) {\n          // Aesthetic timing for a quick tap.\n          // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n          // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n          timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n          this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n          this.initialEvent = null;\n        }\n        fireAfterInterval(() => {\n          this.sendEvent({\n            ...ev,\n            eventType: Hammer.INPUT_END,\n            isFinal: true,\n          });\n          // @ts-ignore -- this should explicitly support undefined\n          this.onGestureEnded();\n        }, timeout);\n      } else {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_MOVE,\n          isFinal: false,\n        });\n      }\n    }\n  }\n\n  updateGestureConfig({\n    shouldActivateOnStart = false,\n    disallowInterruption = false,\n    shouldCancelWhenOutside = true,\n    minDurationMs = Number.NaN,\n    maxDist = Number.NaN,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n}\nexport default PressGestureHandler;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}