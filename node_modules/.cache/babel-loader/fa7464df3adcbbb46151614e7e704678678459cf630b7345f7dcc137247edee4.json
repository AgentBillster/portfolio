{"ast":null,"code":"import { lessThan, multiply, sub, add, divide, greaterThan, lessOrEq, eq } from '../operators';\nimport invariant from 'invariant';\nimport AnimatedNode from '../core/AnimatedNode';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport { createAnimatedFunction as proc } from '../core/AnimatedFunction';\nconst interpolateInternalSingleProc = proc(function (value, inS, inE, outS, outE) {\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  // logic below was made in order to provide a compatibility witn an Animated API\n  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  const result = cond(eq(inS, inE), cond(lessOrEq(value, inS), outS, outE), resultForNonZeroRange);\n  return result;\n});\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\nfunction interpolateInternal(value, inputRange, outputRange) {\n  let offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(lessThan(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));\n}\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode) continue;\n    invariant(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);\n  }\n}\nfunction checkMinElements(name, arr) {\n  invariant(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);\n}\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || typeof arr[i] !== 'number') continue;\n    invariant(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);\n  }\n}\nfunction convertToRadians(outputRange) {\n  for (const [i, value] of outputRange.entries()) {\n    if (typeof value === 'string' && value.endsWith('deg')) {\n      outputRange[i] = parseFloat(value) * (Math.PI / 180);\n    } else if (typeof value === 'string' && value.endsWith('rad')) {\n      outputRange[i] = parseFloat(value);\n    }\n  }\n}\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight\n  } = config;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');\n  convertToRadians(outputRange);\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n  if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n  if (right === Extrapolate.CLAMP) {\n    output = cond(greaterThan(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(greaterThan(value, inputRange[inputRange.length - 1]), value, output);\n  }\n  return output;\n}","map":{"version":3,"names":["lessThan","multiply","sub","add","divide","greaterThan","lessOrEq","eq","invariant","AnimatedNode","createAnimatedCond","cond","createAnimatedFunction","proc","interpolateInternalSingleProc","value","inS","inE","outS","outE","progress","resultForNonZeroRange","result","interpolateInternalSingle","inputRange","outputRange","offset","interpolateInternal","length","Extrapolate","EXTEND","CLAMP","IDENTITY","checkNonDecreasing","name","arr","i","checkMinElements","checkValidNumbers","Number","isFinite","convertToRadians","entries","endsWith","parseFloat","Math","PI","interpolate","config","extrapolate","extrapolateLeft","extrapolateRight","left","right","output"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolate.js"],"sourcesContent":["import {\n  lessThan,\n  multiply,\n  sub,\n  add,\n  divide,\n  greaterThan,\n  lessOrEq,\n  eq,\n} from '../operators';\nimport invariant from 'invariant';\n\nimport AnimatedNode from '../core/AnimatedNode';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport { createAnimatedFunction as proc } from '../core/AnimatedFunction';\n\nconst interpolateInternalSingleProc = proc(function (\n  value,\n  inS,\n  inE,\n  outS,\n  outE\n) {\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  // logic below was made in order to provide a compatibility witn an Animated API\n  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  const result = cond(\n    eq(inS, inE),\n    cond(lessOrEq(value, inS), outS, outE),\n    resultForNonZeroRange\n  );\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange, offset = 0) {\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(\n    lessThan(value, inputRange[offset + 1]),\n    interpolateInternalSingle(value, inputRange, outputRange, offset),\n    interpolateInternal(value, inputRange, outputRange, offset + 1)\n  );\n}\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)\n      continue;\n    invariant(\n      arr[i] >= arr[i - 1],\n      '%s must be monotonically non-decreasing. (%s)',\n      name,\n      arr\n    );\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(\n    arr.length >= 2,\n    '%s must have at least 2 elements. (%s)',\n    name,\n    arr\n  );\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || typeof arr[i] !== 'number') continue;\n    invariant(\n      Number.isFinite(arr[i]),\n      '%s cannot include %s. (%s)',\n      name,\n      arr[i],\n      arr\n    );\n  }\n}\n\nfunction convertToRadians(outputRange) {\n  for (const [i, value] of outputRange.entries()) {\n    if (typeof value === 'string' && value.endsWith('deg')) {\n      outputRange[i] = parseFloat(value) * (Math.PI / 180);\n    } else if (typeof value === 'string' && value.endsWith('rad')) {\n      outputRange[i] = parseFloat(value);\n    }\n  }\n}\n\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight,\n  } = config;\n\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange and outputRange must be the same length.'\n  );\n\n  convertToRadians(outputRange);\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.CLAMP) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      outputRange[outputRange.length - 1],\n      output\n    );\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      value,\n      output\n    );\n  }\n\n  return output;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}