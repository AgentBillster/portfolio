{"ast":null,"code":"import { hasValidBreakpointFormat } from '../theme/tools';\nimport { getRNKeyAndStyleValue } from './getRNKeyAndStyleValue';\n\n/**\n * Common Logic Sharing between useSx and useStyledSytem\n * @param styledSystemProps\n * @param theme\n * @param currentBreakpoint\n * @returns styleFromProps, responsiveStyles\n */\nexport const getStyledFromProps = (styledSystemProps, theme, currentBreakpoint, propConfig) => {\n  let styleFromProps = {};\n  let responsiveStyles = null;\n  const orderedBreakPoints = Object.entries(theme.breakpoints).sort((a, b) => a[1] - b[1]);\n  for (const key in styledSystemProps) {\n    const rawValue = styledSystemProps[key];\n    const config = propConfig[key];\n    if (hasValidBreakpointFormat(rawValue, theme.breakpoints)) {\n      if (!responsiveStyles) responsiveStyles = {};\n      const value = rawValue;\n      if (Array.isArray(value)) {\n        value.forEach((v, i) => {\n          //@ts-ignore\n          if (!responsiveStyles[orderedBreakPoints[i][0]]) {\n            //@ts-ignore\n            responsiveStyles[orderedBreakPoints[i][0]] = [];\n          }\n          const newStyle = getRNKeyAndStyleValue({\n            config,\n            value: v,\n            key,\n            styledSystemProps,\n            theme,\n            currentBreakpoint\n          }); //@ts-ignore\n\n          responsiveStyles[orderedBreakPoints[i][0]].push(newStyle);\n        });\n      } else {\n        for (const k in value) {\n          const newStyle = getRNKeyAndStyleValue({\n            config,\n            value: value[k],\n            key,\n            styledSystemProps,\n            theme,\n            currentBreakpoint\n          });\n          if (!responsiveStyles[k]) {\n            responsiveStyles[k] = [];\n          }\n          responsiveStyles[k].push(newStyle);\n        }\n      }\n    } else {\n      const value = rawValue;\n      const newStyle = getRNKeyAndStyleValue({\n        config,\n        value,\n        key,\n        styledSystemProps,\n        theme,\n        currentBreakpoint\n      });\n      styleFromProps = {\n        ...styleFromProps,\n        ...newStyle\n      };\n    }\n  }\n  return {\n    styleFromProps,\n    responsiveStyles\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,wBAAT,QAAyC,gBAAzC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,iBADgC,EAEhCC,KAFgC,EAGhCC,iBAHgC,EAIhCC,UAJgC,KAK7B;EACH,IAAIC,cAAmB,GAAG,EAA1B;EACA,IAAIC,gBAGH,GAAG,IAHJ;EAIA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,OAAP,CACzBP,KAAK,CAACQ,WADmB,EAEzBC,IAFyB,CAEpB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAFE,CAA3B;EAGA,KAAK,MAAMC,GAAX,IAAkBb,iBAAlB,EAAqC;IACnC,MAAMc,QAAQ,GAAGd,iBAAiB,CAACa,GAAD,CAAlC;IAEA,MAAME,MAAM,GAAGZ,UAAU,CAACU,GAAD,CAAzB;IAEA,IAAIhB,wBAAwB,CAACiB,QAAD,EAAWb,KAAK,CAACQ,WAAjB,CAA5B,EAA2D;MACzD,IAAI,CAACJ,gBAAL,EAAuBA,gBAAgB,GAAG,EAAnB;MAEvB,MAAMW,KAAK,GAAGF,QAAd;MACA,IAAIG,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;QACxBA,KAAK,CAACG,OAAN,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;UACtB;UACA,IAAI,CAAChB,gBAAgB,CAACC,kBAAkB,CAACe,CAAD,CAAlB,CAAsB,CAAtB,CAAD,CAArB,EAAiD;YAC/C;YACAhB,gBAAgB,CAACC,kBAAkB,CAACe,CAAD,CAAlB,CAAsB,CAAtB,CAAD,CAAhB,GAA6C,EAA7C;UACD;UACD,MAAMC,QAAQ,GAAGxB,qBAAqB,CAAC;YACrCiB,MADqC;YAErCC,KAAK,EAAEI,CAF8B;YAGrCP,GAHqC;YAIrCb,iBAJqC;YAKrCC,KALqC;YAMrCC;UANqC,CAAD,CAAtC,CANsB,CActB;;UACAG,gBAAgB,CAACC,kBAAkB,CAACe,CAAD,CAAlB,CAAsB,CAAtB,CAAD,CAAhB,CAA2CE,IAA3C,CAAgDD,QAAhD;QACD,CAhBD;MAiBD,CAlBD,MAkBO;QACL,KAAK,MAAME,CAAX,IAAgBR,KAAhB,EAAuB;UACrB,MAAMM,QAAQ,GAAGxB,qBAAqB,CAAC;YACrCiB,MADqC;YAErCC,KAAK,EAAEA,KAAK,CAACQ,CAAD,CAFyB;YAGrCX,GAHqC;YAIrCb,iBAJqC;YAKrCC,KALqC;YAMrCC;UANqC,CAAD,CAAtC;UAQA,IAAI,CAACG,gBAAgB,CAACmB,CAAD,CAArB,EAA0B;YACxBnB,gBAAgB,CAACmB,CAAD,CAAhB,GAAsB,EAAtB;UACD;UACDnB,gBAAgB,CAACmB,CAAD,CAAhB,CAAoBD,IAApB,CAAyBD,QAAzB;QACD;MACF;IACF,CAtCD,MAsCO;MACL,MAAMN,KAAK,GAAGF,QAAd;MACA,MAAMQ,QAAQ,GAAGxB,qBAAqB,CAAC;QACrCiB,MADqC;QAErCC,KAFqC;QAGrCH,GAHqC;QAIrCb,iBAJqC;QAKrCC,KALqC;QAMrCC;MANqC,CAAD,CAAtC;MASAE,cAAc,GAAG;QACf,GAAGA,cADY;QAEf,GAAGkB;MAFY,CAAjB;IAID;EACF;EAED,OAAO;IAAElB,cAAF;IAAkBC;EAAlB,CAAP;AACD,CA5EM","names":["hasValidBreakpointFormat","getRNKeyAndStyleValue","getStyledFromProps","styledSystemProps","theme","currentBreakpoint","propConfig","styleFromProps","responsiveStyles","orderedBreakPoints","Object","entries","breakpoints","sort","a","b","key","rawValue","config","value","Array","isArray","forEach","v","i","newStyle","push","k"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\native-base\\lib\\module\\utils\\getStyledFromProps.ts"],"sourcesContent":["import { hasValidBreakpointFormat } from '../theme/tools';\nimport { getRNKeyAndStyleValue } from './getRNKeyAndStyleValue';\nimport type { ITheme } from '../theme';\n/**\n * Common Logic Sharing between useSx and useStyledSytem\n * @param styledSystemProps\n * @param theme\n * @param currentBreakpoint\n * @returns styleFromProps, responsiveStyles\n */\n\nexport const getStyledFromProps = (\n  styledSystemProps: any,\n  theme: any,\n  currentBreakpoint: any,\n  propConfig: any\n) => {\n  let styleFromProps: any = {};\n  let responsiveStyles: null | Record<\n    keyof typeof theme.breakpoints,\n    Array<any>\n  > = null;\n  const orderedBreakPoints = Object.entries(\n    theme.breakpoints as ITheme['breakpoints']\n  ).sort((a, b) => a[1] - b[1]);\n  for (const key in styledSystemProps) {\n    const rawValue = styledSystemProps[key];\n\n    const config = propConfig[key as keyof typeof propConfig];\n\n    if (hasValidBreakpointFormat(rawValue, theme.breakpoints)) {\n      if (!responsiveStyles) responsiveStyles = {};\n\n      const value = rawValue;\n      if (Array.isArray(value)) {\n        value.forEach((v, i) => {\n          //@ts-ignore\n          if (!responsiveStyles[orderedBreakPoints[i][0]]) {\n            //@ts-ignore\n            responsiveStyles[orderedBreakPoints[i][0]] = [];\n          }\n          const newStyle = getRNKeyAndStyleValue({\n            config,\n            value: v,\n            key,\n            styledSystemProps,\n            theme,\n            currentBreakpoint,\n          });\n          //@ts-ignore\n          responsiveStyles[orderedBreakPoints[i][0]].push(newStyle);\n        });\n      } else {\n        for (const k in value) {\n          const newStyle = getRNKeyAndStyleValue({\n            config,\n            value: value[k],\n            key,\n            styledSystemProps,\n            theme,\n            currentBreakpoint,\n          });\n          if (!responsiveStyles[k]) {\n            responsiveStyles[k] = [];\n          }\n          responsiveStyles[k].push(newStyle);\n        }\n      }\n    } else {\n      const value = rawValue;\n      const newStyle = getRNKeyAndStyleValue({\n        config,\n        value,\n        key,\n        styledSystemProps,\n        theme,\n        currentBreakpoint,\n      });\n\n      styleFromProps = {\n        ...styleFromProps,\n        ...newStyle,\n      };\n    }\n  }\n\n  return { styleFromProps, responsiveStyles };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}