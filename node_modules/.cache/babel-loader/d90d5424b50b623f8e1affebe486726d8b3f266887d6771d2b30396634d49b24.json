{"ast":null,"code":"import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport { adapt } from './AnimatedBlock';\nimport { val } from '../val';\nimport invariant from 'invariant';\nclass AnimatedCallFunc extends AnimatedNode {\n  _previousCallID;\n  _what;\n  _args;\n  _params;\n  constructor(what, args, params) {\n    invariant(what instanceof AnimatedNode, `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`);\n    invariant(args.every(el => el instanceof AnimatedNode), `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`);\n    invariant(params.every(el => el instanceof AnimatedNode), `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`);\n    super({\n      type: 'callfunc',\n      what,\n      args,\n      params\n    }, [...args]);\n    this._what = what;\n    this._args = args;\n    this._params = params;\n  }\n  toString() {\n    return `AnimatedCallFunc, id: ${this.__nodeID}`;\n  }\n  beginContext() {\n    this._previousCallID = getCallID();\n    setCallID(getCallID() + '/' + this.__nodeID);\n    this._params.forEach((param, index) => {\n      param.beginContext(this._args[index], this._previousCallID);\n    });\n  }\n  endContext() {\n    this._params.forEach(param => {\n      param.endContext();\n    });\n    setCallID(this._previousCallID);\n  }\n  __onEvaluate() {\n    this.beginContext();\n    const value = val(this._what);\n    this.endContext();\n    return value;\n  }\n}\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(proc, args.map(p => adapt(p)), params);\n}","map":{"version":3,"names":["AnimatedNode","getCallID","setCallID","adapt","val","invariant","AnimatedCallFunc","_previousCallID","_what","_args","_params","constructor","what","args","params","every","el","type","toString","__nodeID","beginContext","forEach","param","index","endContext","__onEvaluate","value","createAnimatedCallFunc","proc","map","p"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCallFunc.js"],"sourcesContent":["import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport { adapt } from './AnimatedBlock';\nimport { val } from '../val';\nimport invariant from 'invariant';\n\nclass AnimatedCallFunc extends AnimatedNode {\n  _previousCallID;\n  _what;\n  _args;\n  _params;\n  constructor(what, args, params) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      args.every((el) => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`\n    );\n    invariant(\n      params.every((el) => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`\n    );\n    super(\n      {\n        type: 'callfunc',\n        what,\n        args,\n        params,\n      },\n      [...args]\n    );\n    this._what = what;\n    this._args = args;\n    this._params = params;\n  }\n\n  toString() {\n    return `AnimatedCallFunc, id: ${this.__nodeID}`;\n  }\n\n  beginContext() {\n    this._previousCallID = getCallID();\n    setCallID(getCallID() + '/' + this.__nodeID);\n\n    this._params.forEach((param, index) => {\n      param.beginContext(this._args[index], this._previousCallID);\n    });\n  }\n\n  endContext() {\n    this._params.forEach((param) => {\n      param.endContext();\n    });\n    setCallID(this._previousCallID);\n  }\n\n  __onEvaluate() {\n    this.beginContext();\n    const value = val(this._what);\n    this.endContext();\n    return value;\n  }\n}\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(\n    proc,\n    args.map((p) => adapt(p)),\n    params\n  );\n}\n"],"mappings":"AAAA,OAAOA,YAAY,IAAIC,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AACnE,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,GAAG,QAAQ,QAAQ;AAC5B,OAAOC,SAAS,MAAM,WAAW;AAEjC,MAAMC,gBAAgB,SAASN,YAAY,CAAC;EAC1CO,eAAe;EACfC,KAAK;EACLC,KAAK;EACLC,OAAO;EACPC,WAAW,CAACC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAE;IAC9BT,SAAS,CACPO,IAAI,YAAYZ,YAAY,EAC3B,uFAAsFY,IAAK,EAAC,CAC9F;IACDP,SAAS,CACPQ,IAAI,CAACE,KAAK,CAAEC,EAAE,IAAKA,EAAE,YAAYhB,YAAY,CAAC,EAC7C,6FAA4Fa,IAAK,EAAC,CACpG;IACDR,SAAS,CACPS,MAAM,CAACC,KAAK,CAAEC,EAAE,IAAKA,EAAE,YAAYhB,YAAY,CAAC,EAC/C,+FAA8Fc,MAAO,EAAC,CACxG;IACD,KAAK,CACH;MACEG,IAAI,EAAE,UAAU;MAChBL,IAAI;MACJC,IAAI;MACJC;IACF,CAAC,EACD,CAAC,GAAGD,IAAI,CAAC,CACV;IACD,IAAI,CAACL,KAAK,GAAGI,IAAI;IACjB,IAAI,CAACH,KAAK,GAAGI,IAAI;IACjB,IAAI,CAACH,OAAO,GAAGI,MAAM;EACvB;EAEAI,QAAQ,GAAG;IACT,OAAQ,yBAAwB,IAAI,CAACC,QAAS,EAAC;EACjD;EAEAC,YAAY,GAAG;IACb,IAAI,CAACb,eAAe,GAAGN,SAAS,EAAE;IAClCC,SAAS,CAACD,SAAS,EAAE,GAAG,GAAG,GAAG,IAAI,CAACkB,QAAQ,CAAC;IAE5C,IAAI,CAACT,OAAO,CAACW,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MACrCD,KAAK,CAACF,YAAY,CAAC,IAAI,CAACX,KAAK,CAACc,KAAK,CAAC,EAAE,IAAI,CAAChB,eAAe,CAAC;IAC7D,CAAC,CAAC;EACJ;EAEAiB,UAAU,GAAG;IACX,IAAI,CAACd,OAAO,CAACW,OAAO,CAAEC,KAAK,IAAK;MAC9BA,KAAK,CAACE,UAAU,EAAE;IACpB,CAAC,CAAC;IACFtB,SAAS,CAAC,IAAI,CAACK,eAAe,CAAC;EACjC;EAEAkB,YAAY,GAAG;IACb,IAAI,CAACL,YAAY,EAAE;IACnB,MAAMM,KAAK,GAAGtB,GAAG,CAAC,IAAI,CAACI,KAAK,CAAC;IAC7B,IAAI,CAACgB,UAAU,EAAE;IACjB,OAAOE,KAAK;EACd;AACF;AAEA,OAAO,SAASC,sBAAsB,CAACC,IAAI,EAAEf,IAAI,EAAEC,MAAM,EAAE;EACzD,OAAO,IAAIR,gBAAgB,CACzBsB,IAAI,EACJf,IAAI,CAACgB,GAAG,CAAEC,CAAC,IAAK3B,KAAK,CAAC2B,CAAC,CAAC,CAAC,EACzBhB,MAAM,CACP;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}