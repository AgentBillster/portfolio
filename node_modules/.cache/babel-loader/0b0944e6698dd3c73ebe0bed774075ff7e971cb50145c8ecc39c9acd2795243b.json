{"ast":null,"code":"import { filterDOMProps as $kOq5K$filterDOMProps, mergeProps as $kOq5K$mergeProps } from \"@react-aria/utils\";\nimport { useField as $kOq5K$useField } from \"@react-aria/label\";\nimport { useFocusable as $kOq5K$useFocusable } from \"@react-aria/focus\";\nimport { useRef as $kOq5K$useRef, useEffect as $kOq5K$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {\n  let {\n    inputElementType = \"input\",\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState: validationState,\n    type = \"text\",\n    onChange = () => {}\n  } = props;\n  let {\n    focusableProps: focusableProps\n  } = (0, $kOq5K$useFocusable)(props, ref);\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $kOq5K$useField)(props);\n  let domProps = (0, $kOq5K$filterDOMProps)(props, {\n    labelable: true\n  });\n  const inputOnlyProps = {\n    type: type,\n    pattern: props.pattern\n  };\n  return {\n    labelProps: labelProps,\n    inputProps: (0, $kOq5K$mergeProps)(domProps, inputElementType === \"input\" && inputOnlyProps, {\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      \"aria-required\": isRequired || undefined,\n      \"aria-invalid\": validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-activedescendant\": props[\"aria-activedescendant\"],\n      \"aria-autocomplete\": props[\"aria-autocomplete\"],\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      value: props.value,\n      defaultValue: props.value ? undefined : props.defaultValue,\n      onChange: e => onChange(e.target.value),\n      autoComplete: props.autoComplete,\n      maxLength: props.maxLength,\n      minLength: props.minLength,\n      name: props.name,\n      placeholder: props.placeholder,\n      inputMode: props.inputMode,\n      // Clipboard events\n      onCopy: props.onCopy,\n      onCut: props.onCut,\n      onPaste: props.onPaste,\n      // Composition events\n      onCompositionEnd: props.onCompositionEnd,\n      onCompositionStart: props.onCompositionStart,\n      onCompositionUpdate: props.onCompositionUpdate,\n      // Selection events\n      onSelect: props.onSelect,\n      // Input events\n      onBeforeInput: props.onBeforeInput,\n      onInput: props.onInput,\n      ...focusableProps,\n      ...fieldProps\n    }),\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d841c8010a73d545$var$supportsNativeBeforeInputEvent() {\n  return typeof window !== \"undefined\" && window.InputEvent &&\n  // @ts-ignore\n  typeof InputEvent.prototype.getTargetRanges === \"function\";\n}\nfunction $d841c8010a73d545$export$4f384c9210e583c3(props, state, inputRef) {\n  let stateRef = (0, $kOq5K$useRef)(state);\n  stateRef.current = state;\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  (0, $kOq5K$useEffect)(() => {\n    if (!$d841c8010a73d545$var$supportsNativeBeforeInputEvent()) return;\n    let input = inputRef.current;\n    let onBeforeInput = e => {\n      let state = stateRef.current;\n      // Compute the next value of the input if the event is allowed to proceed.\n      // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n      let nextValue;\n      switch (e.inputType) {\n        case \"historyUndo\":\n        case \"historyRedo\":\n          // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n          // because presumably the input would have already been validated previously.\n          return;\n        case \"deleteContent\":\n        case \"deleteByCut\":\n        case \"deleteByDrag\":\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case \"deleteContentForward\":\n          // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n          // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n          // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n          // If we support additional locales in the future, this may need to change.\n          nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case \"deleteContentBackward\":\n          nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case \"deleteSoftLineBackward\":\n        case \"deleteHardLineBackward\":\n          nextValue = input.value.slice(input.selectionStart);\n          break;\n        default:\n          if (e.data != null) nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);\n          break;\n      }\n      // If we did not compute a value, or the new value is invalid, prevent the event\n      // so that the browser does not update the input text, move the selection, or add to\n      // the undo/redo stack.\n      if (nextValue == null || !state.validate(nextValue)) e.preventDefault();\n    };\n    input.addEventListener(\"beforeinput\", onBeforeInput, false);\n    return () => {\n      input.removeEventListener(\"beforeinput\", onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n  let onBeforeInput = !$d841c8010a73d545$var$supportsNativeBeforeInputEvent() ? e => {\n    let nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);\n    if (!state.validate(nextValue)) e.preventDefault();\n  } : null;\n  let {\n    labelProps: labelProps,\n    inputProps: textFieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $2d73ec29415bd339$export$712718f7aec83d5)(props, inputRef);\n  let compositionStartState = (0, $kOq5K$useRef)(null);\n  return {\n    inputProps: (0, $kOq5K$mergeProps)(textFieldProps, {\n      onBeforeInput: onBeforeInput,\n      onCompositionStart() {\n        // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n        // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n        // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n        // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n        // nor would we want to cancel them because the input from the user is incomplete at that point.\n        // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n        // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n        // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n        // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n        // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n        // are implemented, there is no other way to prevent composed input.\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n        let {\n          value: value,\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        } = inputRef.current;\n        compositionStartState.current = {\n          value: value,\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        };\n      },\n      onCompositionEnd() {\n        if (!state.validate(inputRef.current.value)) {\n          // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n          // But also update the value in React state as well so it is correct for future updates.\n          let {\n            value: value,\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n          } = compositionStartState.current;\n          inputRef.current.value = value;\n          inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n          state.setInputValue(value);\n        }\n      }\n    }),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\nexport { $2d73ec29415bd339$export$712718f7aec83d5 as useTextField, $d841c8010a73d545$export$4f384c9210e583c3 as useFormattedTextField };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;ACAA,GDAA,CCAA;;;;;;;;;;;;AAuGO,SAASA,yCACdC,KAA8B,EAC9BC,GAA0B,EACR;EAClB,IAAI;IACFC,mBAAmB;IACnBC,aAAa,KAAK;IAClBC,aAAa,KAAK;IAClBC,aAAa,KAAK;IAAAC,iBAClBA;IACAC,OAAO;IACPC,WAAW,MAAM,CAAC;EAAA,CACnB,GAAqDR;EACtD,IAAI;IAAAS,gBAACA;EAAc,CAAC,GAAG,uBAAW,EAAET,OAAOC;EAC3C,IAAI;IAAAS,YAACA;IAAUC,YAAEA;IAAUC,kBAAEA;IAAgBC,mBAAEA;EAAiB,CAAC,GAAG,mBAAO,EAAEb;EAC7E,IAAIc,WAAW,yBAAa,EAAEd,OAAO;IAACe,WAAW;EAAI;EAErD,MAAMC,iBAAiB;UACrBT;IACAU,SAASjB,MAAMiB;EACjB;EAEA,OAAO;gBACLP;IACAQ,YAAY,qBAAS,EACnBJ,UACAZ,qBAAqB,WAAWc,gBAChC;MACEG,UAAUhB;MACViB,UAAUf;MACV,iBAAiBD,cAAciB;MAC/B,gBAAgBf,oBAAoB,aAAae;MACjD,qBAAqBrB,KAAK,CAAC,oBAAoB;MAC/C,yBAAyBA,KAAK,CAAC,wBAAwB;MACvD,qBAAqBA,KAAK,CAAC,oBAAoB;MAC/C,iBAAiBA,KAAK,CAAC,gBAAgB;MACvCsB,OAAOtB,MAAMsB,KAAK;MAClBC,cAAcvB,MAAMsB,KAAK,GAAGD,YAAYrB,MAAMuB,YAAY;MAC1Df,UAAWgB,KAAqChB,SAASgB,EAAEC,MAAM,CAACH,KAAK;MACvEI,cAAc1B,MAAM0B,YAAY;MAChCC,WAAW3B,MAAM2B,SAAS;MAC1BC,WAAW5B,MAAM4B,SAAS;MAC1BC,MAAM7B,MAAM6B,IAAI;MAChBC,aAAa9B,MAAM8B,WAAW;MAC9BC,WAAW/B,MAAM+B,SAAS;MAE1B;MACAC,QAAQhC,MAAMgC,MAAM;MACpBC,OAAOjC,MAAMiC,KAAK;MAClBC,SAASlC,MAAMkC,OAAO;MAEtB;MACAC,kBAAkBnC,MAAMmC,gBAAgB;MACxCC,oBAAoBpC,MAAMoC,kBAAkB;MAC5CC,qBAAqBrC,MAAMqC,mBAAmB;MAE9C;MACAC,UAAUtC,MAAMsC,QAAQ;MAExB;MACAC,eAAevC,MAAMuC,aAAa;MAClCC,SAASxC,MAAMwC,OAAO;MACtB,GAAG/B,cAAc;MACjB,GAAGE;IACL;sBAEFC;uBACAC;EACF;AACF;;AC5KA;;;;;;;;;;;;AAuBA,SAAS4B,uDAAiC;EACxC,OAAO,OAAOC,WAAW,eACvBA,OAAOC,UAAU;EACjB;EACA,OAAOA,WAAWC,SAAS,CAACC,eAAe,KAAK;AACpD;AAEO,SAASC,0CAAsB9C,KAAyB,EAAE+C,KAA8B,EAAEC,QAAqC,EAAiB;EAErJ,IAAIC,WAAW,iBAAK,EAAEF;EACtBE,SAASC,OAAO,GAAGH;EAEnB;EACA;EACA;EACA;EACA;EACA;EACA,oBAAS,EAAC,MAAM;IACd,IAAI,CAACN,wDACH;IAGF,IAAIU,QAAQH,SAASE,OAAO;IAE5B,IAAIX,gBAAiBf,KAAkB;MACrC,IAAIuB,QAAQE,SAASC,OAAO;MAE5B;MACA;MACA,IAAIE;MACJ,QAAQ5B,EAAE6B,SAAS;QACjB,KAAK;QACL,KAAK;UACH;UACA;UACA;QACF,KAAK;QACL,KAAK;QACL,KAAK;UACHD,YAAYD,MAAM7B,KAAK,CAACgC,KAAK,CAAC,GAAGH,MAAMI,cAAc,IAAIJ,MAAM7B,KAAK,CAACgC,KAAK,CAACH,MAAMK,YAAY;UAC7F;QACF,KAAK;UACH;UACA;UACA;UACA;UACAJ,YAAYD,MAAMK,YAAY,KAAKL,MAAMI,cAAc,GACnDJ,MAAM7B,KAAK,CAACgC,KAAK,CAAC,GAAGH,MAAMI,cAAc,IAAIJ,MAAM7B,KAAK,CAACgC,KAAK,CAACH,MAAMK,YAAY,GAAG,KACpFL,MAAM7B,KAAK,CAACgC,KAAK,CAAC,GAAGH,MAAMI,cAAc,IAAIJ,MAAM7B,KAAK,CAACgC,KAAK,CAACH,MAAMK,YAAY,CAAC;UACtF;QACF,KAAK;UACHJ,YAAYD,MAAMK,YAAY,KAAKL,MAAMI,cAAc,GACnDJ,MAAM7B,KAAK,CAACgC,KAAK,CAAC,GAAGH,MAAMI,cAAc,GAAG,KAAKJ,MAAM7B,KAAK,CAACgC,KAAK,CAACH,MAAMI,cAAc,IACvFJ,MAAM7B,KAAK,CAACgC,KAAK,CAAC,GAAGH,MAAMI,cAAc,IAAIJ,MAAM7B,KAAK,CAACgC,KAAK,CAACH,MAAMK,YAAY,CAAC;UACtF;QACF,KAAK;QACL,KAAK;UACHJ,YAAYD,MAAM7B,KAAK,CAACgC,KAAK,CAACH,MAAMI,cAAc;UAClD;QACF;UACE,IAAI/B,EAAEiC,IAAI,IAAI,IAAI,EAChBL,YACED,MAAM7B,KAAK,CAACgC,KAAK,CAAC,GAAGH,MAAMI,cAAc,IACzC/B,EAAEiC,IAAI,GACNN,MAAM7B,KAAK,CAACgC,KAAK,CAACH,MAAMK,YAAY;UAExC;MAAM;MAGV;MACA;MACA;MACA,IAAIJ,aAAa,IAAI,IAAI,CAACL,MAAMW,QAAQ,CAACN,YACvC5B,EAAEmC,cAAc;IAEpB;IAEAR,MAAMS,gBAAgB,CAAC,eAAerB,eAAe,KAAK;IAC1D,OAAO,MAAM;MACXY,MAAMU,mBAAmB,CAAC,eAAetB,eAAe,KAAK;IAC/D;EACF,GAAG,CAACS,UAAUC,SAAS;EAEvB,IAAIV,gBAAgB,CAACE,yDACjBjB,KAAK;IACL,IAAI4B,YACF5B,EAAEC,MAAM,CAACH,KAAK,CAACgC,KAAK,CAAC,GAAG9B,EAAEC,MAAM,CAAC8B,cAAc,IAC/C/B,EAAEiC,IAAI,GACNjC,EAAEC,MAAM,CAACH,KAAK,CAACgC,KAAK,CAAC9B,EAAEC,MAAM,CAAC+B,YAAY;IAE5C,IAAI,CAACT,MAAMW,QAAQ,CAACN,YAClB5B,EAAEmC,cAAc;EAEpB,IACE,IAAI;EAER,IAAI;IAAAjD,YAACA;IAAYQ,YAAY4C;IAAclD,kBAAEA;IAAgBC,mBAAEA;EAAiB,CAAC,GAAG,4CAAW,EAAEb,OAAOgD;EAExG,IAAIe,wBAAwB,iBAAK,EAAE,IAAI;EACvC,OAAO;IACL7C,YAAY,qBAAU,EACpB4C,gBACA;qBACEvB;MACAH,qBAAqB;QACnB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAI;UAAAd,OAACA;UAAKiC,gBAAEA;UAAcC,cAAEA;QAAY,CAAC,GAAGR,SAASE,OAAO;QAC5Da,sBAAsBb,OAAO,GAAG;iBAAC5B;0BAAOiC;wBAAgBC;QAAY;MACtE;MACArB,mBAAmB;QACjB,IAAI,CAACY,MAAMW,QAAQ,CAACV,SAASE,OAAO,CAAC5B,KAAK,GAAG;UAC3C;UACA;UACA,IAAI;YAAAA,OAACA;YAAKiC,gBAAEA;YAAcC,cAAEA;UAAY,CAAC,GAAGO,sBAAsBb,OAAO;UACzEF,SAASE,OAAO,CAAC5B,KAAK,GAAGA;UACzB0B,SAASE,OAAO,CAACc,iBAAiB,CAACT,gBAAgBC;UACnDT,MAAMkB,aAAa,CAAC3C;QACtB;MACF;IACF;gBAEFZ;sBACAE;uBACAC;EACF;AACF","names":["$2d73ec29415bd339$export$712718f7aec83d5","props","ref","inputElementType","isDisabled","isRequired","isReadOnly","validationState","type","onChange","focusableProps","labelProps","fieldProps","descriptionProps","errorMessageProps","domProps","labelable","inputOnlyProps","pattern","inputProps","disabled","readOnly","undefined","value","defaultValue","e","target","autoComplete","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput","$d841c8010a73d545$var$supportsNativeBeforeInputEvent","window","InputEvent","prototype","getTargetRanges","$d841c8010a73d545$export$4f384c9210e583c3","state","inputRef","stateRef","current","input","nextValue","inputType","slice","selectionStart","selectionEnd","data","validate","preventDefault","addEventListener","removeEventListener","textFieldProps","compositionStartState","setSelectionRange","setInputValue"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\index.ts","C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useTextField.ts","C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useFormattedTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport type {TextFieldAria} from './useTextField';\nexport {useTextField} from './useTextField';\nexport {useFormattedTextField} from './useFormattedTextField';\nexport type {AriaTextFieldOptions} from './useTextField';\nexport type {AriaTextFieldProps} from '@react-types/textfield';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {\n  ChangeEvent,\n  DOMFactory,\n  HTMLAttributes,\n  LabelHTMLAttributes,\n  ReactDOM,\n  RefObject\n} from 'react';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useField} from '@react-aria/label';\nimport {useFocusable} from '@react-aria/focus';\n\n/**\n * A map of HTML element names and their interface types.\n * For example `'a'` -> `HTMLAnchorElement`.\n */\ntype IntrinsicHTMLElements = {\n  [K in keyof IntrinsicHTMLAttributes]: IntrinsicHTMLAttributes[K] extends HTMLAttributes<infer T> ? T : never\n};\n\n/**\n * A map of HTML element names and their attribute interface types.\n * For example `'a'` -> `AnchorHTMLAttributes<HTMLAnchorElement>`.\n */\ntype IntrinsicHTMLAttributes = {\n  [K in keyof ReactDOM]: ReactDOM[K] extends DOMFactory<infer T, any> ? T : never\n};\n\ntype DefaultElementType = 'input';\n\n/**\n * The intrinsic HTML element names that `useTextField` supports; e.g. `input`,\n * `textarea`.\n */\ntype TextFieldIntrinsicElements = keyof Pick<IntrinsicHTMLElements, 'input' | 'textarea'>;\n\n/**\n * The HTML element interfaces that `useTextField` supports based on what is\n * defined for `TextFieldIntrinsicElements`; e.g. `HTMLInputElement`,\n * `HTMLTextAreaElement`.\n */\ntype TextFieldHTMLElementType = Pick<IntrinsicHTMLElements, TextFieldIntrinsicElements>;\n\n/**\n * The HTML attributes interfaces that `useTextField` supports based on what\n * is defined for `TextFieldIntrinsicElements`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldHTMLAttributesType = Pick<IntrinsicHTMLAttributes, TextFieldIntrinsicElements>;\n\n/**\n * The type of `inputProps` returned by `useTextField`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldInputProps<T extends TextFieldIntrinsicElements> = TextFieldHTMLAttributesType[T];\n\nexport interface AriaTextFieldOptions<T extends TextFieldIntrinsicElements> extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: T\n}\n\n/**\n * The type of `ref` object that can be passed to `useTextField` based on the given\n * intrinsic HTML element name; e.g.`RefObject<HTMLInputElement>`,\n * `RefObject<HTMLTextAreaElement>`.\n */\ntype TextFieldRefObject<T extends TextFieldIntrinsicElements> = RefObject<TextFieldHTMLElementType[T]>;\n\nexport interface TextFieldAria<T extends TextFieldIntrinsicElements = DefaultElementType> {\n  /** Props for the input element. */\n  inputProps: TextFieldInputProps<T>,\n  /** Props for the text field's visible label element, if any. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the text field's description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the text field's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField<T extends TextFieldIntrinsicElements = DefaultElementType>(\n  props: AriaTextFieldOptions<T>,\n  ref: TextFieldRefObject<T>\n): TextFieldAria<T> {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  }: AriaTextFieldOptions<TextFieldIntrinsicElements> = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    ),\n    descriptionProps,\n    errorMessageProps\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n\n  let stateRef = useRef(state);\n  stateRef.current = state;\n\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n\n    let onBeforeInput = (e: InputEvent) => {\n      let state = stateRef.current;\n\n      // Compute the next value of the input if the event is allowed to proceed.\n      // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n      let nextValue: string;\n      switch (e.inputType) {\n        case 'historyUndo':\n        case 'historyRedo':\n          // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n          // because presumably the input would have already been validated previously.\n          return;\n        case 'deleteContent':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentForward':\n          // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n          // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n          // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n          // If we support additional locales in the future, this may need to change.\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentBackward':\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteSoftLineBackward':\n        case 'deleteHardLineBackward':\n          nextValue = input.value.slice(input.selectionStart);\n          break;\n        default:\n          if (e.data != null) {\n            nextValue =\n              input.value.slice(0, input.selectionStart) +\n              e.data +\n              input.value.slice(input.selectionEnd);\n          }\n          break;\n      }\n\n      // If we did not compute a value, or the new value is invalid, prevent the event\n      // so that the browser does not update the input text, move the selection, or add to\n      // the undo/redo stack.\n      if (nextValue == null || !state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    };\n\n    input.addEventListener('beforeinput', onBeforeInput, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}