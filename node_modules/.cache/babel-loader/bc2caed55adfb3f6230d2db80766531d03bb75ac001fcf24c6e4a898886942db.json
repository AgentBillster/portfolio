{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { View } from 'react-native';\nlet Screens;\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\nexport const MaybeScreenContainer = _ref => {\n  var _Screens, _Screens$screensEnabl;\n  let {\n    enabled,\n    ...rest\n  } = _ref;\n  if ((_Screens = Screens) !== null && _Screens !== void 0 && (_Screens$screensEnabl = _Screens.screensEnabled) !== null && _Screens$screensEnabl !== void 0 && _Screens$screensEnabl.call(_Screens)) {\n    return /*#__PURE__*/React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n  return /*#__PURE__*/React.createElement(View, rest);\n};\nexport function MaybeScreen(_ref2) {\n  var _Screens2, _Screens2$screensEnab;\n  let {\n    visible,\n    children,\n    ...rest\n  } = _ref2;\n  if ((_Screens2 = Screens) !== null && _Screens2 !== void 0 && (_Screens2$screensEnab = _Screens2.screensEnabled) !== null && _Screens2$screensEnab !== void 0 && _Screens2$screensEnab.call(_Screens2)) {\n    return /*#__PURE__*/React.createElement(Screens.Screen, _extends({\n      activityState: visible ? 2 : 0\n    }, rest), children);\n  }\n  return /*#__PURE__*/React.createElement(ResourceSavingView, _extends({\n    visible: visible\n  }, rest), children);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,SAASA,kBAAkB,QAAQ,4BAA4B;AAC/D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAAoBC,IAAI,QAA8B,cAAc;AAUpE,IAAIC,OAA0D;AAE9D,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC3C,CAAC,CAAC,OAAOC,CAAC,EAAE;EACV;AAAA;AAGF,OAAO,MAAMC,oBAAoB,GAAGC,QAO9B;EAAA;EAAA,IAP+B;IACnCC,OAAO;IACP,GAAGC;EAKL,CAAC;EACC,gBAAIN,OAAO,8DAAPO,SAASC,cAAc,kDAAvBC,oCAA2B,EAAE;IAC/B,oBAAOX,oBAACE,OAAO,CAACU,eAAe;MAACL,OAAO,EAAEA;IAAQ,GAAKC,IAAI,EAAI;EAChE;EAEA,oBAAOR,oBAACC,IAAI,EAAKO,IAAI,CAAI;AAC3B,CAAC;AAED,OAAO,SAASK,WAAW,QAAwC;EAAA;EAAA,IAAvC;IAAEC,OAAO;IAAEC,QAAQ;IAAE,GAAGP;EAAY,CAAC;EAC/D,iBAAIN,OAAO,+DAAPc,UAASN,cAAc,kDAAvBO,qCAA2B,EAAE;IAC/B,oBACEjB,oBAACE,OAAO,CAACgB,MAAM;MAACC,aAAa,EAAEL,OAAO,GAAG,CAAC,GAAG;IAAE,GAAKN,IAAI,GACrDO,QAAQ,CACM;EAErB;EAEA,oBACEf,oBAACD,kBAAkB;IAACe,OAAO,EAAEA;EAAQ,GAAKN,IAAI,GAC3CO,QAAQ,CACU;AAEzB","names":["ResourceSavingView","React","View","Screens","require","e","MaybeScreenContainer","_ref","enabled","rest","_Screens","screensEnabled","_Screens$screensEnabl","ScreenContainer","MaybeScreen","visible","children","_Screens2","_Screens2$screensEnab","Screen","activityState"],"sources":["ScreenFallback.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}