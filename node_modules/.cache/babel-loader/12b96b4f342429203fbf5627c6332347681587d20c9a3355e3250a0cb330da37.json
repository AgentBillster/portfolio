{"ast":null,"code":"import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Platform, Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst StyledText = makeStyledComponent(NativeText); // To have a RN compatible behaviour, we'll inherit parent text styles as base style\n\nconst TextAncestorContext = /*#__PURE__*/React.createContext(false);\nconst Text = (_ref2, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...resolvedProps\n  } = usePropsResolution('Text', props, {}, {\n    resolveResponsively: ['noOfLines', 'numberOfLines'],\n    // We override the component base theme if text has an ancestor.\n    componentTheme: hasTextAncestor ? {} : undefined\n  });\n  const _ref = useRef(null); // TODO: might have to add this condition\n\n  const {\n    isHovered\n  } = useHover({}, _hover ? _ref : null); // const { isHovered } = useHover({}, _ref);\n\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n  let resolvedFontFamily;\n  resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : hasTextAncestor ? undefined : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : hasTextAncestor ? undefined : 'normal'\n  });\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  } // Need to apply fontWeight & fontStyle on web\n\n  if (Platform.OS === 'web') {\n    if (resolvedFontFamily) {\n      fontFamily = resolvedFontFamily.fontFamily;\n    }\n    resolvedFontFamily = {\n      fontFamily,\n      fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : hasTextAncestor ? undefined : 400,\n      fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : hasTextAncestor ? undefined : 'normal'\n    };\n  } //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  const propsToSpread = {\n    ...resolvedProps,\n    numberOfLines: numberOfLines || noOfLines ? numberOfLines || noOfLines : isTruncated ? 1 : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine: underline && strikeThrough ? 'underline line-through' : underline ? 'underline' : strikeThrough ? 'line-through' : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover)\n  };\n  return hasTextAncestor ? /*#__PURE__*/React.createElement(StyledText, propsToSpread, children) : /*#__PURE__*/React.createElement(TextAncestorContext.Provider, {\n    value: true\n  }, /*#__PURE__*/React.createElement(StyledText, propsToSpread, children));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Text));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","useRef","usePropsResolution","useHover","mergeRefs","makeStyledComponent","useResolvedFontFamily","Platform","Text","NativeText","useHasResponsiveProps","StyledText","TextAncestorContext","createContext","ref","children","props","hasTextAncestor","useContext","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","fontFamily","propFontFamily","fontWeight","propFontWeight","fontStyle","propFontStyle","_hover","fontSize","numberOfLines","resolvedProps","resolveResponsively","componentTheme","undefined","_ref","isHovered","resolvedFontFamily","OS","propsToSpread","bg","textDecorationLine","Provider","value"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\native-base\\lib\\module\\components\\primitives\\Text\\index.tsx"],"sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Platform, Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledText = makeStyledComponent(NativeText);\n// To have a RN compatible behaviour, we'll inherit parent text styles as base style\nconst TextAncestorContext = React.createContext(false);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Text',\n    props,\n    {},\n    {\n      resolveResponsively: ['noOfLines', 'numberOfLines'],\n      // We override the component base theme if text has an ancestor.\n      componentTheme: hasTextAncestor ? {} : undefined,\n    }\n  );\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n  let resolvedFontFamily;\n\n  resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n    fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n  // Need to apply fontWeight & fontStyle on web\n  if (Platform.OS === 'web') {\n    if (resolvedFontFamily) {\n      fontFamily = resolvedFontFamily.fontFamily;\n    }\n\n    resolvedFontFamily = {\n      fontFamily,\n      fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n      fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n    };\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const propsToSpread = {\n    ...resolvedProps,\n    numberOfLines:\n      numberOfLines || noOfLines\n        ? numberOfLines || noOfLines\n        : isTruncated\n        ? 1\n        : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine:\n      underline && strikeThrough\n        ? 'underline line-through'\n        : underline\n        ? 'underline'\n        : strikeThrough\n        ? 'line-through'\n        : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover),\n  };\n\n  return hasTextAncestor ? (\n    <StyledText {...propsToSpread}>{children}</StyledText>\n  ) : (\n    <TextAncestorContext.Provider value={true}>\n      <StyledText {...propsToSpread}>{children}</StyledText>\n    </TextAncestorContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}