{"ast":null,"code":"import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n  constructor(message, value) {\n    invariant(typeof message === 'string', `Reanimated: Animated.debug node first argument should be of type string but got ${message}`);\n    invariant(value instanceof AnimatedNode, `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`);\n    super({\n      type: 'debug',\n      message,\n      value\n    }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell = NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants?.executionEnvironment === 'storeClient';\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([call([value], _ref => {\n        let [a] = _ref;\n        return console.log(`${message} ${a}`);\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}","map":{"version":3,"names":["invariant","NativeModules","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","_message","_value","constructor","message","value","type","toString","__nodeID","__onEvaluate","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","NativeUnimoduleProxy","modulesConstants","ExponentConstants","executionEnvironment","a"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,GAAG,QAAQ,QAAQ;AAC5B,SAASC,KAAK,EAAEC,mBAAmB,IAAIC,KAAK,QAAQ,iBAAiB;AACrE,SAASC,kBAAkB,IAAIC,IAAI,QAAQ,gBAAgB;AAC3D,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,aAAa,SAASD,YAAY,CAAC;EACvCE,QAAQ;EACRC,MAAM;EAENC,WAAW,CAACC,OAAO,EAAEC,KAAK,EAAE;IAC1Bd,SAAS,CACP,OAAOa,OAAO,KAAK,QAAQ,EAC1B,mFAAkFA,OAAQ,EAAC,CAC7F;IACDb,SAAS,CACPc,KAAK,YAAYN,YAAY,EAC5B,0FAAyFM,KAAM,EAAC,CAClG;IACD,KAAK,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEF,OAAO;MAAEC;IAAM,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;IACjD,IAAI,CAACJ,QAAQ,GAAGG,OAAO;IACvB,IAAI,CAACF,MAAM,GAAGG,KAAK;EACrB;EAEAE,QAAQ,GAAG;IACT,OAAQ,sBAAqB,IAAI,CAACC,QAAS,EAAC;EAC9C;EAEAC,YAAY,GAAG;IACb,MAAMJ,KAAK,GAAGZ,GAAG,CAAC,IAAI,CAACS,MAAM,CAAC;IAC9BQ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,QAAQ,EAAEI,KAAK,CAAC;IACjC,OAAOA,KAAK;EACd;AACF;AAEA,OAAO,SAASO,mBAAmB,CAACR,OAAO,EAAEC,KAAK,EAAE;EAClD,IAAIQ,OAAO,EAAE;IACX;IACA;IACA,MAAMC,uBAAuB,GAAG,OAAOC,IAAI,KAAK,WAAW;;IAE3D;IACA;IACA,MAAMC,kBAAkB,GACtBxB,aAAa,CAACyB,oBAAoB,EAAEC,gBAAgB,EAAEC,iBAAiB,EACnEC,oBAAoB,KAAK,aAAa;IAE5C,IAAIN,uBAAuB,IAAIE,kBAAkB,EAAE;MACjD;MACA;MACA,OAAOpB,KAAK,CAAC,CACXE,IAAI,CAAC,CAACO,KAAK,CAAC,EAAE;QAAA,IAAC,CAACgB,CAAC,CAAC;QAAA,OAAKX,OAAO,CAACC,GAAG,CAAE,GAAEP,OAAQ,IAAGiB,CAAE,EAAC,CAAC;MAAA,EAAC,EACtDhB,KAAK,CACN,CAAC;IACJ,CAAC,MAAM;MACL,OAAO,IAAIL,aAAa,CAACI,OAAO,EAAEV,KAAK,CAACW,KAAK,CAAC,CAAC;IACjD;EACF;EACA;EACA,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}