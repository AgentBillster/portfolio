{"ast":null,"code":"import { BaseAnimationBuilder } from '../animationBuilder';\nimport { withSequence, withTiming } from '../../animation';\nimport { FadeIn, FadeOut } from '../defaultAnimations/Fade';\nexport class EntryExitTransition extends BaseAnimationBuilder {\n  constructor() {\n    super(...arguments);\n    this.enteringV = FadeIn;\n    this.exitingV = FadeOut;\n    this.build = () => {\n      const delayFunction = this.getDelayFunction();\n      const callback = this.callbackV;\n      const delay = this.getDelay();\n      const enteringAnimation = this.enteringV.build();\n      const exitingAnimation = this.exitingV.build();\n      const exitingDuration = this.exitingV.getDuration();\n      return values => {\n        'worklet';\n\n        var _a, _b, _c, _d;\n        const enteringValues = enteringAnimation(values);\n        const exitingValues = exitingAnimation(values);\n        const animations = {\n          transform: []\n        };\n        for (const prop of Object.keys(exitingValues.animations)) {\n          if (prop === 'transform') {\n            (_a = exitingValues.animations[prop]) === null || _a === void 0 ? void 0 : _a.forEach((value, index) => {\n              var _a;\n              for (const transformProp of Object.keys(value)) {\n                (_a = animations.transform) === null || _a === void 0 ? void 0 : _a.push({\n                  [transformProp]: delayFunction(delay, withSequence(value[transformProp], withTiming(exitingValues.initialValues.transform ? exitingValues.initialValues.transform[index][transformProp] : 0, {\n                    duration: 0\n                  })))\n                });\n              }\n            });\n          } else {\n            const sequence = enteringValues.animations[prop] !== undefined ? [exitingValues.animations[prop], withTiming(enteringValues.initialValues[prop], {\n              duration: 0\n            }), enteringValues.animations[prop]] : [exitingValues.animations[prop], withTiming(Object.keys(values).includes(prop) ? values[prop] : exitingValues.initialValues[prop], {\n              duration: 0\n            })];\n            animations[prop] = delayFunction(delay, withSequence(...sequence));\n          }\n        }\n        for (const prop of Object.keys(enteringValues.animations)) {\n          if (prop === 'transform') {\n            (_b = enteringValues.animations[prop]) === null || _b === void 0 ? void 0 : _b.forEach((value, index) => {\n              var _a;\n              for (const transformProp of Object.keys(value)) {\n                (_a = animations.transform) === null || _a === void 0 ? void 0 : _a.push({\n                  [transformProp]: delayFunction(delay + exitingDuration, withSequence(withTiming(enteringValues.initialValues.transform ? enteringValues.initialValues.transform[index][transformProp] : 0, {\n                    duration: exitingDuration\n                  }), value[transformProp]))\n                });\n              }\n            });\n          } else if (animations[prop] !== undefined) {\n            // it was already added in the previous loop\n            continue;\n          } else {\n            animations[prop] = delayFunction(delay, withSequence(withTiming(enteringValues.initialValues[prop], {\n              duration: 0\n            }), enteringValues.animations[prop]));\n          }\n        }\n        const mergedTransform = ((_c = exitingValues.initialValues.transform) !== null && _c !== void 0 ? _c : []).concat(((_d = enteringValues.animations.transform) !== null && _d !== void 0 ? _d : []).map(value => {\n          const objectKeys = Object.keys(value);\n          if ((objectKeys === null || objectKeys === void 0 ? void 0 : objectKeys.length) < 1) {\n            console.error(`[Reanimated]: \\${value} is not a valid Transform object`);\n            return value;\n          }\n          const transformProp = objectKeys[0];\n          const current = value[transformProp].current;\n          if (typeof current === 'string') {\n            if (current.includes('deg')) return {\n              [transformProp]: '0deg'\n            };else return {\n              [transformProp]: '0'\n            };\n          } else if (transformProp.includes('translate')) {\n            return {\n              [transformProp]: 0\n            };\n          } else {\n            return {\n              [transformProp]: 1\n            };\n          }\n          return value;\n        }));\n        return {\n          initialValues: Object.assign(Object.assign({}, exitingValues.initialValues), {\n            originX: values.currentOriginX,\n            originY: values.currentOriginY,\n            width: values.currentWidth,\n            height: values.currentHeight,\n            transform: mergedTransform\n          }),\n          animations: Object.assign({\n            originX: delayFunction(delay + exitingDuration, withTiming(values.targetOriginX, {\n              duration: exitingDuration\n            })),\n            originY: delayFunction(delay + exitingDuration, withTiming(values.targetOriginY, {\n              duration: exitingDuration\n            })),\n            width: delayFunction(delay + exitingDuration, withTiming(values.targetWidth, {\n              duration: exitingDuration\n            })),\n            height: delayFunction(delay + exitingDuration, withTiming(values.targetHeight, {\n              duration: exitingDuration\n            }))\n          }, animations),\n          callback: callback\n        };\n      };\n    };\n  }\n  static createInstance() {\n    return new EntryExitTransition();\n  }\n  static entering(animation) {\n    const instance = this.createInstance();\n    return instance.entering(animation);\n  }\n  entering(animation) {\n    this.enteringV = animation;\n    return this;\n  }\n  static exiting(animation) {\n    const instance = this.createInstance();\n    return instance.exiting(animation);\n  }\n  exiting(animation) {\n    this.exitingV = animation;\n    return this;\n  }\n}\nexport function combineTransition(exiting, entering) {\n  return EntryExitTransition.entering(entering).exiting(exiting);\n}","map":{"version":3,"names":["BaseAnimationBuilder","withSequence","withTiming","FadeIn","FadeOut","EntryExitTransition","constructor","arguments","enteringV","exitingV","build","delayFunction","getDelayFunction","callback","callbackV","delay","getDelay","enteringAnimation","exitingAnimation","exitingDuration","getDuration","values","_a","_b","_c","_d","enteringValues","exitingValues","animations","transform","prop","Object","keys","forEach","value","index","transformProp","push","initialValues","duration","sequence","undefined","includes","mergedTransform","concat","map","objectKeys","length","console","error","current","assign","originX","currentOriginX","originY","currentOriginY","width","currentWidth","height","currentHeight","targetOriginX","targetOriginY","targetWidth","targetHeight","createInstance","entering","animation","instance","exiting","combineTransition"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition.js"],"sourcesContent":["import { BaseAnimationBuilder } from '../animationBuilder';\nimport { withSequence, withTiming } from '../../animation';\nimport { FadeIn, FadeOut } from '../defaultAnimations/Fade';\nexport class EntryExitTransition extends BaseAnimationBuilder {\n    constructor() {\n        super(...arguments);\n        this.enteringV = FadeIn;\n        this.exitingV = FadeOut;\n        this.build = () => {\n            const delayFunction = this.getDelayFunction();\n            const callback = this.callbackV;\n            const delay = this.getDelay();\n            const enteringAnimation = this.enteringV.build();\n            const exitingAnimation = this.exitingV.build();\n            const exitingDuration = this.exitingV.getDuration();\n            return (values) => {\n                'worklet';\n                var _a, _b, _c, _d;\n                const enteringValues = enteringAnimation(values);\n                const exitingValues = exitingAnimation(values);\n                const animations = {\n                    transform: [],\n                };\n                for (const prop of Object.keys(exitingValues.animations)) {\n                    if (prop === 'transform') {\n                        (_a = exitingValues.animations[prop]) === null || _a === void 0 ? void 0 : _a.forEach((value, index) => {\n                            var _a;\n                            for (const transformProp of Object.keys(value)) {\n                                (_a = animations.transform) === null || _a === void 0 ? void 0 : _a.push({\n                                    [transformProp]: delayFunction(delay, withSequence(value[transformProp], withTiming(exitingValues.initialValues.transform\n                                        ? exitingValues.initialValues.transform[index][transformProp]\n                                        : 0, { duration: 0 }))),\n                                });\n                            }\n                        });\n                    }\n                    else {\n                        const sequence = enteringValues.animations[prop] !== undefined\n                            ? [\n                                exitingValues.animations[prop],\n                                withTiming(enteringValues.initialValues[prop], {\n                                    duration: 0,\n                                }),\n                                enteringValues.animations[prop],\n                            ]\n                            : [\n                                exitingValues.animations[prop],\n                                withTiming(Object.keys(values).includes(prop)\n                                    ? values[prop]\n                                    : exitingValues.initialValues[prop], { duration: 0 }),\n                            ];\n                        animations[prop] = delayFunction(delay, withSequence(...sequence));\n                    }\n                }\n                for (const prop of Object.keys(enteringValues.animations)) {\n                    if (prop === 'transform') {\n                        (_b = enteringValues.animations[prop]) === null || _b === void 0 ? void 0 : _b.forEach((value, index) => {\n                            var _a;\n                            for (const transformProp of Object.keys(value)) {\n                                (_a = animations.transform) === null || _a === void 0 ? void 0 : _a.push({\n                                    [transformProp]: delayFunction(delay + exitingDuration, withSequence(withTiming(enteringValues.initialValues.transform\n                                        ? enteringValues.initialValues.transform[index][transformProp]\n                                        : 0, { duration: exitingDuration }), value[transformProp])),\n                                });\n                            }\n                        });\n                    }\n                    else if (animations[prop] !== undefined) {\n                        // it was already added in the previous loop\n                        continue;\n                    }\n                    else {\n                        animations[prop] = delayFunction(delay, withSequence(withTiming(enteringValues.initialValues[prop], { duration: 0 }), enteringValues.animations[prop]));\n                    }\n                }\n                const mergedTransform = ((_c = exitingValues.initialValues.transform) !== null && _c !== void 0 ? _c : []).concat(((_d = enteringValues.animations.transform) !== null && _d !== void 0 ? _d : []).map((value) => {\n                    const objectKeys = Object.keys(value);\n                    if ((objectKeys === null || objectKeys === void 0 ? void 0 : objectKeys.length) < 1) {\n                        console.error(`[Reanimated]: \\${value} is not a valid Transform object`);\n                        return value;\n                    }\n                    const transformProp = objectKeys[0];\n                    const current = value[transformProp].current;\n                    if (typeof current === 'string') {\n                        if (current.includes('deg'))\n                            return {\n                                [transformProp]: '0deg',\n                            };\n                        else\n                            return {\n                                [transformProp]: '0',\n                            };\n                    }\n                    else if (transformProp.includes('translate')) {\n                        return { [transformProp]: 0 };\n                    }\n                    else {\n                        return { [transformProp]: 1 };\n                    }\n                    return value;\n                }));\n                return {\n                    initialValues: Object.assign(Object.assign({}, exitingValues.initialValues), { originX: values.currentOriginX, originY: values.currentOriginY, width: values.currentWidth, height: values.currentHeight, transform: mergedTransform }),\n                    animations: Object.assign({ originX: delayFunction(delay + exitingDuration, withTiming(values.targetOriginX, { duration: exitingDuration })), originY: delayFunction(delay + exitingDuration, withTiming(values.targetOriginY, { duration: exitingDuration })), width: delayFunction(delay + exitingDuration, withTiming(values.targetWidth, { duration: exitingDuration })), height: delayFunction(delay + exitingDuration, withTiming(values.targetHeight, { duration: exitingDuration })) }, animations),\n                    callback: callback,\n                };\n            };\n        };\n    }\n    static createInstance() {\n        return new EntryExitTransition();\n    }\n    static entering(animation) {\n        const instance = this.createInstance();\n        return instance.entering(animation);\n    }\n    entering(animation) {\n        this.enteringV = animation;\n        return this;\n    }\n    static exiting(animation) {\n        const instance = this.createInstance();\n        return instance.exiting(animation);\n    }\n    exiting(animation) {\n        this.exitingV = animation;\n        return this;\n    }\n}\nexport function combineTransition(exiting, entering) {\n    return EntryExitTransition.entering(entering).exiting(exiting);\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,qBAAqB;AAC1D,SAASC,YAAY,EAAEC,UAAU,QAAQ,iBAAiB;AAC1D,SAASC,MAAM,EAAEC,OAAO,QAAQ,2BAA2B;AAC3D,OAAO,MAAMC,mBAAmB,SAASL,oBAAoB,CAAC;EAC1DM,WAAW,GAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,SAAS,GAAGL,MAAM;IACvB,IAAI,CAACM,QAAQ,GAAGL,OAAO;IACvB,IAAI,CAACM,KAAK,GAAG,MAAM;MACf,MAAMC,aAAa,GAAG,IAAI,CAACC,gBAAgB,EAAE;MAC7C,MAAMC,QAAQ,GAAG,IAAI,CAACC,SAAS;MAC/B,MAAMC,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;MAC7B,MAAMC,iBAAiB,GAAG,IAAI,CAACT,SAAS,CAACE,KAAK,EAAE;MAChD,MAAMQ,gBAAgB,GAAG,IAAI,CAACT,QAAQ,CAACC,KAAK,EAAE;MAC9C,MAAMS,eAAe,GAAG,IAAI,CAACV,QAAQ,CAACW,WAAW,EAAE;MACnD,OAAQC,MAAM,IAAK;QACf,SAAS;;QACT,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;QAClB,MAAMC,cAAc,GAAGT,iBAAiB,CAACI,MAAM,CAAC;QAChD,MAAMM,aAAa,GAAGT,gBAAgB,CAACG,MAAM,CAAC;QAC9C,MAAMO,UAAU,GAAG;UACfC,SAAS,EAAE;QACf,CAAC;QACD,KAAK,MAAMC,IAAI,IAAIC,MAAM,CAACC,IAAI,CAACL,aAAa,CAACC,UAAU,CAAC,EAAE;UACtD,IAAIE,IAAI,KAAK,WAAW,EAAE;YACtB,CAACR,EAAE,GAAGK,aAAa,CAACC,UAAU,CAACE,IAAI,CAAC,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;cACpG,IAAIb,EAAE;cACN,KAAK,MAAMc,aAAa,IAAIL,MAAM,CAACC,IAAI,CAACE,KAAK,CAAC,EAAE;gBAC5C,CAACZ,EAAE,GAAGM,UAAU,CAACC,SAAS,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACe,IAAI,CAAC;kBACrE,CAACD,aAAa,GAAGzB,aAAa,CAACI,KAAK,EAAEd,YAAY,CAACiC,KAAK,CAACE,aAAa,CAAC,EAAElC,UAAU,CAACyB,aAAa,CAACW,aAAa,CAACT,SAAS,GACnHF,aAAa,CAACW,aAAa,CAACT,SAAS,CAACM,KAAK,CAAC,CAACC,aAAa,CAAC,GAC3D,CAAC,EAAE;oBAAEG,QAAQ,EAAE;kBAAE,CAAC,CAAC,CAAC;gBAC9B,CAAC,CAAC;cACN;YACJ,CAAC,CAAC;UACN,CAAC,MACI;YACD,MAAMC,QAAQ,GAAGd,cAAc,CAACE,UAAU,CAACE,IAAI,CAAC,KAAKW,SAAS,GACxD,CACEd,aAAa,CAACC,UAAU,CAACE,IAAI,CAAC,EAC9B5B,UAAU,CAACwB,cAAc,CAACY,aAAa,CAACR,IAAI,CAAC,EAAE;cAC3CS,QAAQ,EAAE;YACd,CAAC,CAAC,EACFb,cAAc,CAACE,UAAU,CAACE,IAAI,CAAC,CAClC,GACC,CACEH,aAAa,CAACC,UAAU,CAACE,IAAI,CAAC,EAC9B5B,UAAU,CAAC6B,MAAM,CAACC,IAAI,CAACX,MAAM,CAAC,CAACqB,QAAQ,CAACZ,IAAI,CAAC,GACvCT,MAAM,CAACS,IAAI,CAAC,GACZH,aAAa,CAACW,aAAa,CAACR,IAAI,CAAC,EAAE;cAAES,QAAQ,EAAE;YAAE,CAAC,CAAC,CAC5D;YACLX,UAAU,CAACE,IAAI,CAAC,GAAGnB,aAAa,CAACI,KAAK,EAAEd,YAAY,CAAC,GAAGuC,QAAQ,CAAC,CAAC;UACtE;QACJ;QACA,KAAK,MAAMV,IAAI,IAAIC,MAAM,CAACC,IAAI,CAACN,cAAc,CAACE,UAAU,CAAC,EAAE;UACvD,IAAIE,IAAI,KAAK,WAAW,EAAE;YACtB,CAACP,EAAE,GAAGG,cAAc,CAACE,UAAU,CAACE,IAAI,CAAC,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACU,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;cACrG,IAAIb,EAAE;cACN,KAAK,MAAMc,aAAa,IAAIL,MAAM,CAACC,IAAI,CAACE,KAAK,CAAC,EAAE;gBAC5C,CAACZ,EAAE,GAAGM,UAAU,CAACC,SAAS,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACe,IAAI,CAAC;kBACrE,CAACD,aAAa,GAAGzB,aAAa,CAACI,KAAK,GAAGI,eAAe,EAAElB,YAAY,CAACC,UAAU,CAACwB,cAAc,CAACY,aAAa,CAACT,SAAS,GAChHH,cAAc,CAACY,aAAa,CAACT,SAAS,CAACM,KAAK,CAAC,CAACC,aAAa,CAAC,GAC5D,CAAC,EAAE;oBAAEG,QAAQ,EAAEpB;kBAAgB,CAAC,CAAC,EAAEe,KAAK,CAACE,aAAa,CAAC,CAAC;gBAClE,CAAC,CAAC;cACN;YACJ,CAAC,CAAC;UACN,CAAC,MACI,IAAIR,UAAU,CAACE,IAAI,CAAC,KAAKW,SAAS,EAAE;YACrC;YACA;UACJ,CAAC,MACI;YACDb,UAAU,CAACE,IAAI,CAAC,GAAGnB,aAAa,CAACI,KAAK,EAAEd,YAAY,CAACC,UAAU,CAACwB,cAAc,CAACY,aAAa,CAACR,IAAI,CAAC,EAAE;cAAES,QAAQ,EAAE;YAAE,CAAC,CAAC,EAAEb,cAAc,CAACE,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC;UAC3J;QACJ;QACA,MAAMa,eAAe,GAAG,CAAC,CAACnB,EAAE,GAAGG,aAAa,CAACW,aAAa,CAACT,SAAS,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE,EAAEoB,MAAM,CAAC,CAAC,CAACnB,EAAE,GAAGC,cAAc,CAACE,UAAU,CAACC,SAAS,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE,EAAEoB,GAAG,CAAEX,KAAK,IAAK;UAC9M,MAAMY,UAAU,GAAGf,MAAM,CAACC,IAAI,CAACE,KAAK,CAAC;UACrC,IAAI,CAACY,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACC,MAAM,IAAI,CAAC,EAAE;YACjFC,OAAO,CAACC,KAAK,CAAE,yDAAwD,CAAC;YACxE,OAAOf,KAAK;UAChB;UACA,MAAME,aAAa,GAAGU,UAAU,CAAC,CAAC,CAAC;UACnC,MAAMI,OAAO,GAAGhB,KAAK,CAACE,aAAa,CAAC,CAACc,OAAO;UAC5C,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;YAC7B,IAAIA,OAAO,CAACR,QAAQ,CAAC,KAAK,CAAC,EACvB,OAAO;cACH,CAACN,aAAa,GAAG;YACrB,CAAC,CAAC,KAEF,OAAO;cACH,CAACA,aAAa,GAAG;YACrB,CAAC;UACT,CAAC,MACI,IAAIA,aAAa,CAACM,QAAQ,CAAC,WAAW,CAAC,EAAE;YAC1C,OAAO;cAAE,CAACN,aAAa,GAAG;YAAE,CAAC;UACjC,CAAC,MACI;YACD,OAAO;cAAE,CAACA,aAAa,GAAG;YAAE,CAAC;UACjC;UACA,OAAOF,KAAK;QAChB,CAAC,CAAC,CAAC;QACH,OAAO;UACHI,aAAa,EAAEP,MAAM,CAACoB,MAAM,CAACpB,MAAM,CAACoB,MAAM,CAAC,CAAC,CAAC,EAAExB,aAAa,CAACW,aAAa,CAAC,EAAE;YAAEc,OAAO,EAAE/B,MAAM,CAACgC,cAAc;YAAEC,OAAO,EAAEjC,MAAM,CAACkC,cAAc;YAAEC,KAAK,EAAEnC,MAAM,CAACoC,YAAY;YAAEC,MAAM,EAAErC,MAAM,CAACsC,aAAa;YAAE9B,SAAS,EAAEc;UAAgB,CAAC,CAAC;UACtOf,UAAU,EAAEG,MAAM,CAACoB,MAAM,CAAC;YAAEC,OAAO,EAAEzC,aAAa,CAACI,KAAK,GAAGI,eAAe,EAAEjB,UAAU,CAACmB,MAAM,CAACuC,aAAa,EAAE;cAAErB,QAAQ,EAAEpB;YAAgB,CAAC,CAAC,CAAC;YAAEmC,OAAO,EAAE3C,aAAa,CAACI,KAAK,GAAGI,eAAe,EAAEjB,UAAU,CAACmB,MAAM,CAACwC,aAAa,EAAE;cAAEtB,QAAQ,EAAEpB;YAAgB,CAAC,CAAC,CAAC;YAAEqC,KAAK,EAAE7C,aAAa,CAACI,KAAK,GAAGI,eAAe,EAAEjB,UAAU,CAACmB,MAAM,CAACyC,WAAW,EAAE;cAAEvB,QAAQ,EAAEpB;YAAgB,CAAC,CAAC,CAAC;YAAEuC,MAAM,EAAE/C,aAAa,CAACI,KAAK,GAAGI,eAAe,EAAEjB,UAAU,CAACmB,MAAM,CAAC0C,YAAY,EAAE;cAAExB,QAAQ,EAAEpB;YAAgB,CAAC,CAAC;UAAE,CAAC,EAAES,UAAU,CAAC;UAC3ef,QAAQ,EAAEA;QACd,CAAC;MACL,CAAC;IACL,CAAC;EACL;EACA,OAAOmD,cAAc,GAAG;IACpB,OAAO,IAAI3D,mBAAmB,EAAE;EACpC;EACA,OAAO4D,QAAQ,CAACC,SAAS,EAAE;IACvB,MAAMC,QAAQ,GAAG,IAAI,CAACH,cAAc,EAAE;IACtC,OAAOG,QAAQ,CAACF,QAAQ,CAACC,SAAS,CAAC;EACvC;EACAD,QAAQ,CAACC,SAAS,EAAE;IAChB,IAAI,CAAC1D,SAAS,GAAG0D,SAAS;IAC1B,OAAO,IAAI;EACf;EACA,OAAOE,OAAO,CAACF,SAAS,EAAE;IACtB,MAAMC,QAAQ,GAAG,IAAI,CAACH,cAAc,EAAE;IACtC,OAAOG,QAAQ,CAACC,OAAO,CAACF,SAAS,CAAC;EACtC;EACAE,OAAO,CAACF,SAAS,EAAE;IACf,IAAI,CAACzD,QAAQ,GAAGyD,SAAS;IACzB,OAAO,IAAI;EACf;AACJ;AACA,OAAO,SAASG,iBAAiB,CAACD,OAAO,EAAEH,QAAQ,EAAE;EACjD,OAAO5D,mBAAmB,CAAC4D,QAAQ,CAACA,QAAQ,CAAC,CAACG,OAAO,CAACA,OAAO,CAAC;AAClE"},"metadata":{},"sourceType":"module","externalDependencies":[]}