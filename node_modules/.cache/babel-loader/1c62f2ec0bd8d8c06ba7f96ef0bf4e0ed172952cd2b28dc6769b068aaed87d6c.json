{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport { Animated, StyleSheet, View, Keyboard, StatusBar, I18nManager } from 'react-native';\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\nconst DRAG_TOSS = 0.05;\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\nexport default class DrawerLayout extends Component {\n  constructor(_props) {\n    var _this;\n    super(_props);\n    _this = this;\n    _defineProperty(this, \"openValue\", void 0);\n    _defineProperty(this, \"onGestureEvent\", void 0);\n    _defineProperty(this, \"accessibilityIsModalView\", /*#__PURE__*/React.createRef());\n    _defineProperty(this, \"pointerEventsView\", /*#__PURE__*/React.createRef());\n    _defineProperty(this, \"panGestureHandler\", /*#__PURE__*/React.createRef());\n    _defineProperty(this, \"drawerShown\", false);\n    _defineProperty(this, \"updateAnimatedEvent\", (props, state) => {\n      // Event definition is based on\n      const {\n        drawerPosition,\n        drawerWidth,\n        drawerType\n      } = props;\n      const {\n        dragX: dragXValue,\n        touchX: touchXValue,\n        drawerTranslation,\n        containerWidth\n      } = state;\n      let dragX = dragXValue;\n      let touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        // Most of the code is written in a way to handle left-side drawer. In\n        // order to handle right-side drawer the only thing we need to do is to\n        // reverse events coming from gesture handler in a way they emulate\n        // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n        // calulcated by subtracing real touchX from the width of the container\n        // (such that when touch happens at the right edge the value is simply 0)\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      } // While closing the drawer when user starts gesture outside of its area (in greyed\n      // out part of the window), we want the drawer to follow only once finger reaches the\n      // edge of the drawer.\n      // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n      // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n      // an arrow pointing left\n      // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    +---------------+    +---------------+    +---------------+    +---------------+\n      //\n      // For the above to work properly we define animated value that will keep\n      // start position of the gesture. Then we use that value to calculate how\n      // much we need to subtract from the dragX. If the gesture started on the\n      // greyed out area we take the distance from the edge of the drawer to the\n      // start position. Otherwise we don't subtract at all and the drawer be\n      // pulled back as soon as you start the pan.\n      //\n      // This is used only when drawerType is \"front\"\n      //\n\n      let translationX = dragX;\n      if (drawerType === 'front') {\n        const startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n      }\n\n      this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      const gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (this.props.onDrawerSlide) {\n        gestureOptions.listener = ev => {\n          var _this$props$onDrawerS, _this$props;\n          const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          const position = translationX / this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n      this.onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n    _defineProperty(this, \"handleContainerLayout\", _ref => {\n      let {\n        nativeEvent\n      } = _ref;\n      this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n    _defineProperty(this, \"emitStateChanged\", (newState, drawerWillShow) => {\n      var _this$props$onDrawerS2, _this$props2;\n      (_this$props$onDrawerS2 = (_this$props2 = this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n    _defineProperty(this, \"openingHandlerStateChange\", _ref2 => {\n      let {\n        nativeEvent\n      } = _ref2;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this.handleRelease({\n          nativeEvent\n        });\n      } else if (nativeEvent.state === State.ACTIVE) {\n        this.emitStateChanged(DRAGGING, false);\n        this.setState({\n          drawerState: DRAGGING\n        });\n        if (this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        if (this.props.hideStatusBar) {\n          StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n    _defineProperty(this, \"onTapHandlerStateChange\", _ref3 => {\n      let {\n        nativeEvent\n      } = _ref3;\n      if (this.drawerShown && nativeEvent.oldState === State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n        this.closeDrawer();\n      }\n    });\n    _defineProperty(this, \"handleRelease\", _ref4 => {\n      let {\n        nativeEvent\n      } = _ref4;\n      const {\n        drawerWidth,\n        drawerPosition,\n        drawerType\n      } = this.props;\n      const {\n        containerWidth\n      } = this.state;\n      let {\n        translationX: dragX,\n        velocityX,\n        x: touchX\n      } = nativeEvent;\n      if (drawerPosition !== 'left') {\n        // See description in _updateAnimatedEvent about why events are flipped\n        // for right-side drawer\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      const gestureStartX = touchX - dragX;\n      let dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n      const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      const shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n    _defineProperty(this, \"updateShowing\", showing => {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n      this.drawerShown = showing;\n      (_this$accessibilityIs = this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      const {\n        drawerPosition,\n        minSwipeDistance,\n        edgeWidth\n      } = this.props;\n      const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      }; // @ts-ignore internal API, maybe could be fixed in handler types\n\n      (_this$panGestureHandl = this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n    _defineProperty(this, \"animateDrawer\", (fromValue, toValue, velocity, speed) => {\n      this.state.dragX.setValue(0);\n      this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n      if (fromValue != null) {\n        let nextFramePosition = fromValue;\n        if (this.props.useNativeAnimations) {\n          // When using native driver, we predict the next position of the\n          // animation because it takes one frame of a roundtrip to pass RELEASE\n          // event from native driver to JS before we can start animating. Without\n          // it, it is more noticable that the frame is dropped.\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      const willShow = toValue !== 0;\n      this.updateShowing(willShow);\n      this.emitStateChanged(SETTLING, willShow);\n      this.setState({\n        drawerState: SETTLING\n      });\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n      Animated.spring(this.state.drawerTranslation, {\n        velocity,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(_ref5 => {\n        let {\n          finished\n        } = _ref5;\n        if (finished) {\n          this.emitStateChanged(IDLE, willShow);\n          this.setState({\n            drawerOpened: willShow\n          });\n          if (this.state.drawerState !== DRAGGING) {\n            // it's possilbe that user started drag while the drawer\n            // was settling, don't override state in this case\n            this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n            (_this$props$onDrawerO = (_this$props3 = this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n            (_this$props$onDrawerC = (_this$props4 = this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n    _defineProperty(this, \"openDrawer\", function () {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n      // it would not be clickable\n\n      _this.forceUpdate();\n    });\n    _defineProperty(this, \"closeDrawer\", function () {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // TODO: decide if it should be null or undefined is the proper value\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n      // it would be still clickable\n\n      _this.forceUpdate();\n    });\n    _defineProperty(this, \"renderOverlay\", () => {\n      /* Overlay styles */\n      invariant(this.openValue, 'should be set');\n      let overlayOpacity;\n      if (this.state.drawerState !== IDLE) {\n        overlayOpacity = this.openValue;\n      } else {\n        overlayOpacity = this.state.drawerOpened ? 1 : 0;\n      }\n      const dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: this.props.overlayColor\n      };\n      return /*#__PURE__*/React.createElement(TapGestureHandler, {\n        onHandlerStateChange: this.onTapHandlerStateChange\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        pointerEvents: this.drawerShown ? 'auto' : 'none',\n        ref: this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n    _defineProperty(this, \"renderDrawer\", () => {\n      const {\n        drawerBackgroundColor,\n        drawerWidth,\n        drawerPosition,\n        drawerType,\n        drawerContainerStyle,\n        contentContainerStyle\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      const drawerSlide = drawerType !== 'back';\n      const containerSlide = drawerType !== 'front'; // we rely on row and row-reverse flex directions to position the drawer\n      // properly. Apparently for RTL these are flipped which requires us to use\n      // the opposite setting for the drawer to appear from left or right\n      // according to the drawerPosition prop\n\n      const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      const dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      const openValue = this.openValue;\n      invariant(openValue, 'should be set');\n      let containerStyles;\n      if (containerSlide) {\n        const containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      let drawerTranslateX = 0;\n      if (drawerSlide) {\n        const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      const drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return /*#__PURE__*/React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: this.handleContainerLayout\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()), /*#__PURE__*/React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: this.accessibilityIsModalView,\n        accessibilityViewIsModal: this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, /*#__PURE__*/React.createElement(View, {\n        style: dynamicDrawerStyles\n      }, this.props.renderNavigationView(this.openValue))));\n    });\n    _defineProperty(this, \"setPanGestureRef\", ref => {\n      var _this$props$onGesture, _this$props5;\n\n      // TODO(TS): make sure it is OK taken from\n      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n      this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n    const _dragX = new Animated.Value(0);\n    const _touchX = new Animated.Value(0);\n    const _drawerTranslation = new Animated.Value(0);\n    this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false\n    };\n    this.updateAnimatedEvent(_props, this.state);\n  }\n  shouldComponentUpdate(props, state) {\n    if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n      this.updateAnimatedEvent(props, state);\n    }\n    return true;\n  }\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance\n    } = this.props;\n    const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n\n    const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n\n    const hitSlop = fromLeft ? {\n      left: 0,\n      width: this.drawerShown ? undefined : edgeWidth\n    } : {\n      right: 0,\n      width: this.drawerShown ? undefined : edgeWidth\n    };\n    return /*#__PURE__*/React.createElement(PanGestureHandler // @ts-ignore could be fixed in handler types\n    , {\n      userSelect: this.props.userSelect,\n      ref: this.setPanGestureRef,\n      hitSlop: hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance,\n      failOffsetY: [-15, 15],\n      onGestureEvent: this.onGestureEvent,\n      onHandlerStateChange: this.openingHandlerStateChange,\n      enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n      enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n    }, this.renderDrawer());\n  }\n}\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row'\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Component","invariant","Animated","StyleSheet","View","Keyboard","StatusBar","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","_defineProperty","createRef","state","drawerPosition","drawerWidth","drawerType","dragX","dragXValue","touchX","touchXValue","drawerTranslation","containerWidth","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","dismiss","hideStatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","drawerOpened","onDrawerOpen","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","onHandlerStateChange","onTapHandlerStateChange","ref","style","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","onGestureRef","updateAnimatedEvent","shouldComponentUpdate","render","userSelect","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Left","Right","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // it's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}