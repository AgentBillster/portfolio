{"ast":null,"code":"import { processColor } from 'react-native';\nimport { round } from '../base';\nimport color from './color';\nimport interpolate, { Extrapolate } from './interpolate';\nfunction red(c) {\n  return c >> 16 & 255;\n}\nfunction green(c) {\n  return c >> 8 & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return (c >> 24 & 255) / 255;\n}\n\n/**\n * Use this if you want to interpolate an `Animated.Value` into color values.\n *\n * #### Why is this needed?\n *\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\n * of `interpolate()` function, that won't really work (at least at the moment).\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\n *\n * So, for now you can just use this helper instead.\n */\nexport default function interpolateColors(animationValue, options) {\n  const {\n    inputRange,\n    outputColorRange\n  } = options;\n  const colors = outputColorRange.map(processColor);\n  const r = round(interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(red),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  const g = round(interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(green),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  const b = round(interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(blue),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return color(r, g, b, a);\n}","map":{"version":3,"names":["processColor","round","color","interpolate","Extrapolate","red","c","green","blue","opacity","interpolateColors","animationValue","options","inputRange","outputColorRange","colors","map","r","outputRange","extrapolate","CLAMP","g","b","a"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js"],"sourcesContent":["import { processColor } from 'react-native';\nimport { round } from '../base';\nimport color from './color';\nimport interpolate, { Extrapolate } from './interpolate';\n\nfunction red(c) {\n  return (c >> 16) & 255;\n}\nfunction green(c) {\n  return (c >> 8) & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return ((c >> 24) & 255) / 255;\n}\n\n/**\n * Use this if you want to interpolate an `Animated.Value` into color values.\n *\n * #### Why is this needed?\n *\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\n * of `interpolate()` function, that won't really work (at least at the moment).\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\n *\n * So, for now you can just use this helper instead.\n */\nexport default function interpolateColors(animationValue, options) {\n  const { inputRange, outputColorRange } = options;\n  const colors = outputColorRange.map(processColor);\n\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(red),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(green),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(blue),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,cAAc;AAC3C,SAASC,KAAK,QAAQ,SAAS;AAC/B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,WAAW,IAAIC,WAAW,QAAQ,eAAe;AAExD,SAASC,GAAG,CAACC,CAAC,EAAE;EACd,OAAQA,CAAC,IAAI,EAAE,GAAI,GAAG;AACxB;AACA,SAASC,KAAK,CAACD,CAAC,EAAE;EAChB,OAAQA,CAAC,IAAI,CAAC,GAAI,GAAG;AACvB;AACA,SAASE,IAAI,CAACF,CAAC,EAAE;EACf,OAAOA,CAAC,GAAG,GAAG;AAChB;AACA,SAASG,OAAO,CAACH,CAAC,EAAE;EAClB,OAAO,CAAEA,CAAC,IAAI,EAAE,GAAI,GAAG,IAAI,GAAG;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASI,iBAAiB,CAACC,cAAc,EAAEC,OAAO,EAAE;EACjE,MAAM;IAAEC,UAAU;IAAEC;EAAiB,CAAC,GAAGF,OAAO;EAChD,MAAMG,MAAM,GAAGD,gBAAgB,CAACE,GAAG,CAAChB,YAAY,CAAC;EAEjD,MAAMiB,CAAC,GAAGhB,KAAK,CACbE,WAAW,CAACQ,cAAc,EAAE;IAC1BE,UAAU;IACVK,WAAW,EAAEH,MAAM,CAACC,GAAG,CAACX,GAAG,CAAC;IAC5Bc,WAAW,EAAEf,WAAW,CAACgB;EAC3B,CAAC,CAAC,CACH;EACD,MAAMC,CAAC,GAAGpB,KAAK,CACbE,WAAW,CAACQ,cAAc,EAAE;IAC1BE,UAAU;IACVK,WAAW,EAAEH,MAAM,CAACC,GAAG,CAACT,KAAK,CAAC;IAC9BY,WAAW,EAAEf,WAAW,CAACgB;EAC3B,CAAC,CAAC,CACH;EACD,MAAME,CAAC,GAAGrB,KAAK,CACbE,WAAW,CAACQ,cAAc,EAAE;IAC1BE,UAAU;IACVK,WAAW,EAAEH,MAAM,CAACC,GAAG,CAACR,IAAI,CAAC;IAC7BW,WAAW,EAAEf,WAAW,CAACgB;EAC3B,CAAC,CAAC,CACH;EACD,MAAMG,CAAC,GAAGpB,WAAW,CAACQ,cAAc,EAAE;IACpCE,UAAU;IACVK,WAAW,EAAEH,MAAM,CAACC,GAAG,CAACP,OAAO,CAAC;IAChCU,WAAW,EAAEf,WAAW,CAACgB;EAC3B,CAAC,CAAC;EAEF,OAAOlB,KAAK,CAACe,CAAC,EAAEI,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}