{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\13093\\\\codestuff\\\\portfolio\\\\src\\\\components\\\\TabBarMinimal.js\",\n  _s = $RefreshSig$();\nimport { Pressable, Text, View, Box, HStack, useColorMode } from \"native-base\";\nimport { useLinkTo } from \"@react-navigation/native\";\nimport { Dimensions } from \"react-native\";\nimport { useSpring, animated, useSpringValue } from \"@react-spring/web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = Dimensions.get(\"window\").width;\nconst height = Dimensions.get(\"window\").height;\nconst barheight = height * 0.2;\nconst TabBarMinimal = _ref => {\n  _s();\n  let {\n    state,\n    descriptors,\n    navigation\n  } = _ref;\n  const linkTo = useLinkTo();\n  const {\n    colorMode,\n    toggleColorMode\n  } = useColorMode();\n  const colorvalue = useSpringValue();\n  const bg = useSpring({\n    background: colorMode === \"light\" ? \"white\" : \"#202023\"\n  });\n  const handleToggle = () => {\n    toggleColorMode();\n    // colorMode === \"light\" ? colorvalue.start(1) : colorvalue.start(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    style: {\n      ...bg,\n      display: \"flex\",\n      justifyContent: \"space-evenly\",\n      height: barheight,\n      width\n    },\n    children: state.routes.map((route, index) => {\n      const {\n        options\n      } = descriptors[route.key];\n      const label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n      const isFocused = state.index === index;\n      const onPress = () => {\n        const event = navigation.emit({\n          type: \"tabPress\",\n          target: route.key,\n          canPreventDefault: true\n        });\n\n        // linkTo('/profile/jane')\n        if (!isFocused && !event.defaultPrevented) {\n          console.log(\"the merge thing\");\n          navigation.navigate({\n            name: route.name,\n            merge: true\n          });\n        }\n      };\n      return /*#__PURE__*/_jsxDEV(Pressable, {\n        accessibilityRole: \"button\",\n        accessibilityState: isFocused ? {\n          selected: true\n        } : {},\n        accessibilityLabel: options.tabBarAccessibilityLabel,\n        onPress: onPress,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: 30,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(TabBarMinimal, \"7mcFF5IgsgZdhDshApY8AlSFXzo=\", false, function () {\n  return [useLinkTo, useColorMode, useSpringValue, useSpring];\n});\n_c = TabBarMinimal;\nexport default TabBarMinimal;\nvar _c;\n$RefreshReg$(_c, \"TabBarMinimal\");","map":{"version":3,"names":["Pressable","Text","View","Box","HStack","useColorMode","useLinkTo","Dimensions","useSpring","animated","useSpringValue","width","get","height","barheight","TabBarMinimal","state","descriptors","navigation","linkTo","colorMode","toggleColorMode","colorvalue","bg","background","handleToggle","display","justifyContent","routes","map","route","index","options","key","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","console","log","navigate","merge","selected","tabBarAccessibilityLabel"],"sources":["C:/Users/13093/codestuff/portfolio/src/components/TabBarMinimal.js"],"sourcesContent":["import { Pressable, Text, View, Box, HStack, useColorMode } from \"native-base\";\r\nimport { useLinkTo } from \"@react-navigation/native\";\r\nimport { Dimensions } from \"react-native\";\r\nimport { useSpring, animated, useSpringValue } from \"@react-spring/web\";\r\n\r\nconst width = Dimensions.get(\"window\").width;\r\nconst height = Dimensions.get(\"window\").height;\r\n\r\nconst barheight = height * 0.2;\r\n\r\nconst TabBarMinimal = ({ state, descriptors, navigation }) => {\r\n  const linkTo = useLinkTo();\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const colorvalue = useSpringValue();\r\n\r\n  const bg = useSpring({\r\n    background: colorMode === \"light\" ? \"white\" : \"#202023\",\r\n  });\r\n\r\n  const handleToggle = () => {\r\n    toggleColorMode();\r\n    // colorMode === \"light\" ? colorvalue.start(1) : colorvalue.start(0);\r\n  };\r\n  return (\r\n    <animated.div\r\n      style={{\r\n        ...bg,\r\n        display: \"flex\",\r\n        justifyContent: \"space-evenly\",\r\n\r\n        height: barheight,\r\n        width,\r\n      }}\r\n    >\r\n      {state.routes.map((route, index) => {\r\n        const { options } = descriptors[route.key];\r\n        const label =\r\n          options.tabBarLabel !== undefined\r\n            ? options.tabBarLabel\r\n            : options.title !== undefined\r\n            ? options.title\r\n            : route.name;\r\n\r\n        const isFocused = state.index === index;\r\n\r\n        const onPress = () => {\r\n          const event = navigation.emit({\r\n            type: \"tabPress\",\r\n            target: route.key,\r\n            canPreventDefault: true,\r\n          });\r\n\r\n          // linkTo('/profile/jane')\r\n          if (!isFocused && !event.defaultPrevented) {\r\n            console.log(\"the merge thing\");\r\n            navigation.navigate({ name: route.name, merge: true });\r\n          }\r\n        };\r\n\r\n        return (\r\n          <Pressable\r\n            accessibilityRole=\"button\"\r\n            accessibilityState={isFocused ? { selected: true } : {}}\r\n            accessibilityLabel={options.tabBarAccessibilityLabel}\r\n            onPress={onPress}\r\n          >\r\n            <Text fontSize={30}>{label}</Text>\r\n          </Pressable>\r\n        );\r\n      })}\r\n    </animated.div>\r\n  );\r\n};\r\n\r\nexport default TabBarMinimal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}