{"ast":null,"code":"import { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nexport const colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nlet updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n  updatePropsByPlatform = (_, updates, maybeViewRef) => {\n    'worklet';\n\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach((item, _) => {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  updatePropsByPlatform = (viewDescriptors, updates, _) => {\n    'worklet';\n\n    for (const key in updates) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    }\n    viewDescriptors.value.forEach(viewDescriptor => {\n      _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n    });\n  };\n}\nexport const updateProps = updatePropsByPlatform;\nexport const updatePropsJestWrapper = (viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {\n  adapters.forEach(adapter => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;","map":{"version":3,"names":["processColor","makeShareable","isConfigured","_updatePropsJS","shouldBeUseWeb","colorProps","ColorProperties","updatePropsByPlatform","_","updates","maybeViewRef","items","forEach","item","viewDescriptors","key","indexOf","value","viewDescriptor","_updateProps","tag","name","updateProps","updatePropsJestWrapper","animatedStyle","adapters","adapter","current","Object","assign"],"sources":["C:/Users/13093/codestuff/portfolio/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"sourcesContent":["import { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nexport const colorProps = [\n    'backgroundColor',\n    'borderBottomColor',\n    'borderColor',\n    'borderLeftColor',\n    'borderRightColor',\n    'borderTopColor',\n    'borderStartColor',\n    'borderEndColor',\n    'color',\n    'shadowColor',\n    'textDecorationColor',\n    'tintColor',\n    'textShadowColor',\n    'overlayColor',\n];\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nlet updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n    updatePropsByPlatform = (_, updates, maybeViewRef) => {\n        'worklet';\n        if (maybeViewRef) {\n            maybeViewRef.items.forEach((item, _) => {\n                _updatePropsJS(updates, item);\n            });\n        }\n    };\n}\nelse {\n    updatePropsByPlatform = (viewDescriptors, updates, _) => {\n        'worklet';\n        for (const key in updates) {\n            if (ColorProperties.indexOf(key) !== -1) {\n                updates[key] = processColor(updates[key]);\n            }\n        }\n        viewDescriptors.value.forEach((viewDescriptor) => {\n            _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n        });\n    };\n}\nexport const updateProps = updatePropsByPlatform;\nexport const updatePropsJestWrapper = (viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {\n    adapters.forEach((adapter) => {\n        adapter(updates);\n    });\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n    updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,UAAU;AACvC,SAASC,aAAa,EAAEC,YAAY,QAAQ,QAAQ;AACpD,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,cAAc,QAAQ,mBAAmB;AAClD;AACA,OAAO,MAAMC,UAAU,GAAG,CACtB,iBAAiB,EACjB,mBAAmB,EACnB,aAAa,EACb,iBAAiB,EACjB,kBAAkB,EAClB,gBAAgB,EAChB,kBAAkB,EAClB,gBAAgB,EAChB,OAAO,EACP,aAAa,EACb,qBAAqB,EACrB,WAAW,EACX,iBAAiB,EACjB,cAAc,CACjB;AACD,OAAO,MAAMC,eAAe,GAAG,CAACJ,YAAY,EAAE,GAAG,EAAE,GAAGD,aAAa,CAACI,UAAU,CAAC;AAC/E,IAAIE,qBAAqB;AACzB,IAAIH,cAAc,EAAE,EAAE;EAClBG,qBAAqB,GAAG,CAACC,CAAC,EAAEC,OAAO,EAAEC,YAAY,KAAK;IAClD,SAAS;;IACT,IAAIA,YAAY,EAAE;MACdA,YAAY,CAACC,KAAK,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEL,CAAC,KAAK;QACpCL,cAAc,CAACM,OAAO,EAAEI,IAAI,CAAC;MACjC,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC,MACI;EACDN,qBAAqB,GAAG,CAACO,eAAe,EAAEL,OAAO,EAAED,CAAC,KAAK;IACrD,SAAS;;IACT,KAAK,MAAMO,GAAG,IAAIN,OAAO,EAAE;MACvB,IAAIH,eAAe,CAACU,OAAO,CAACD,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QACrCN,OAAO,CAACM,GAAG,CAAC,GAAGf,YAAY,CAACS,OAAO,CAACM,GAAG,CAAC,CAAC;MAC7C;IACJ;IACAD,eAAe,CAACG,KAAK,CAACL,OAAO,CAAEM,cAAc,IAAK;MAC9CC,YAAY,CAACD,cAAc,CAACE,GAAG,EAAEF,cAAc,CAACG,IAAI,IAAI,SAAS,EAAEZ,OAAO,CAAC;IAC/E,CAAC,CAAC;EACN,CAAC;AACL;AACA,OAAO,MAAMa,WAAW,GAAGf,qBAAqB;AAChD,OAAO,MAAMgB,sBAAsB,GAAG,CAACT,eAAe,EAAEL,OAAO,EAAEC,YAAY,EAAEc,aAAa,EAAEC,QAAQ,KAAK;EACvGA,QAAQ,CAACb,OAAO,CAAEc,OAAO,IAAK;IAC1BA,OAAO,CAACjB,OAAO,CAAC;EACpB,CAAC,CAAC;EACFe,aAAa,CAACG,OAAO,CAACV,KAAK,GAAGW,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,aAAa,CAACG,OAAO,CAACV,KAAK,CAAC,EAAER,OAAO,CAAC;EACpGa,WAAW,CAACR,eAAe,EAAEL,OAAO,EAAEC,YAAY,CAAC;AACvD,CAAC;AACD,eAAeY,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}