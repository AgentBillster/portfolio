{"ast":null,"code":"import React, { useEffect, useMemo, useRef } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useDynamicAnimation, motify } from '../../core';\nconst MotiView = motify(View)();\nexport function MotiProgressBar(_ref) {\n  let {\n    height = 12,\n    progress = 0,\n    borderRadius = height / 2,\n    style,\n    colorMode = 'dark',\n    containerColor = colorMode === 'dark' ? '#333' : '#eee',\n    containerStyle,\n    color = '#00C806',\n    transition = {\n      type: 'timing',\n      duration: 200\n    },\n    silenceRenderWarnings = false\n  } = _ref;\n  const barState = useDynamicAnimation(() => ({\n    translateX: '-100%'\n  }));\n  // TODO this won't be necessary once Moti memoizes props for you.\n  if (!transition) {\n    console.error(`[moti] <ProgressBar /> \"transition\" prop must be undefined or a Moti transition object, but it got this type instead: ${typeof transition}.`, transition);\n  }\n  const transitionString = JSON.stringify(transition);\n  const _transition = useMemo(() => JSON.parse(transitionString), [transitionString]);\n  const outerStyle = useMemo(() => [styles.container, containerStyle, {\n    height,\n    borderRadius,\n    backgroundColor: containerColor\n  }], [borderRadius, containerColor, containerStyle, height]);\n  const progressStyle = useMemo(() => [style, styles.bar, {\n    borderRadius,\n    backgroundColor: color\n  }], [borderRadius, color, style]);\n  useEffect(function animateOnProgressChange() {\n    const percent = Math.round(progress * 100);\n    const translateX = `${percent - 100}%`;\n    if (barState.current?.translateX !== translateX) {\n      barState.animateTo(current => ({\n        ...current,\n        translateX\n      }));\n    }\n  }, [barState, progress]);\n  const unnecessaryRerenders = useRef({\n    containerStyle: {\n      previousValue: containerStyle,\n      changes: 0\n    },\n    style: {\n      previousValue: style,\n      changes: 0\n    }\n  });\n  useEffect(function checkUnnecessaryRerenders() {\n    const isDev = typeof __DEV__ === 'undefined' || __DEV__;\n    if (silenceRenderWarnings || !isDev) {\n      return;\n    }\n    if (containerStyle !== unnecessaryRerenders.current.containerStyle.previousValue) {\n      unnecessaryRerenders.current.containerStyle.changes += 1;\n    }\n    if (style !== unnecessaryRerenders.current.style.previousValue) {\n      unnecessaryRerenders.current.style.changes += 1;\n    }\n    const warningProps = [];\n    Object.entries(unnecessaryRerenders.current).forEach(_ref2 => {\n      let [prop, {\n        changes\n      }] = _ref2;\n      if (changes > 5) {\n        warningProps.push({\n          prop,\n          changes\n        });\n      }\n    });\n    if (warningProps.length) {\n      console.warn(`[moti] <MotiProgress /> is re-rendering often due to these props: ${warningProps.map(warning => `\"${warning.prop}: ${warning.changes} re-renders\"`).join(', ')}. This can reduce animation performance. Please memoize these props with useMemo, or create them outside of render code.`, `If you are intentionally re-rendering this often, for some reason, pass silenceRenderWarnings={true} on this component.`);\n    }\n  }, [containerStyle, silenceRenderWarnings, style]);\n  return useMemo(() => React.createElement(View, {\n    style: outerStyle\n  }, React.createElement(MotiView, {\n    transition: _transition,\n    state: barState,\n    style: progressStyle\n  })), [_transition, barState, outerStyle, progressStyle]);\n}\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    overflow: 'hidden'\n  },\n  bar: {\n    width: '100%',\n    height: '100%'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","useEffect","useMemo","useRef","StyleSheet","View","useDynamicAnimation","motify","MotiView","MotiProgressBar","height","progress","borderRadius","style","colorMode","containerColor","containerStyle","color","transition","type","duration","silenceRenderWarnings","barState","translateX","console","error","transitionString","JSON","stringify","_transition","parse","outerStyle","styles","container","backgroundColor","progressStyle","bar","animateOnProgressChange","percent","Math","round","current","animateTo","unnecessaryRerenders","previousValue","changes","checkUnnecessaryRerenders","isDev","__DEV__","warningProps","Object","entries","forEach","prop","push","length","warn","map","warning","join","state","create","width","overflow"],"sources":["C:\\Users\\13093\\codestuff\\portfolio\\node_modules\\moti\\src\\components\\progress\\index.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react'\nimport { StyleSheet, ViewStyle, View } from 'react-native'\nimport { MotiTransitionProp, useDynamicAnimation, motify } from '../../core'\n\nconst MotiView = motify(View)()\n\nexport type MotiProgressBarProps = {\n  /**\n   * Number between 0-1\n   *\n   * @requires\n   */\n  progress: number\n  /**\n   * Height of the bar in pixels.\n   *\n   * @default `12`\n   */\n  height?: number\n  color?: string\n  containerColor?: string\n  /**\n   * Container border radius\n   */\n  borderRadius?: number\n  containerStyle?: ViewStyle\n  style?: ViewStyle\n  /**\n   * Transition for the animation. See the `transition` docs from Moti's `<MotiView />` to see how to use it.\n   *\n   * @default\n   * ```jsx\n   * {\n   *  type: 'timing',\n   *  duration: 300,\n   * }\n   * ```\n   */\n  transition?: MotiTransitionProp<ViewStyle>\n  /**\n   * @default `dark`\n   */\n  colorMode?: 'dark' | 'light'\n  /**\n   * @default false\n   *\n   * When `false`, Moti will warn you if you're re-rendering this component too often.\n   */\n  silenceRenderWarnings?: boolean\n}\n\nexport function MotiProgressBar({\n  height = 12,\n  progress = 0,\n  borderRadius = height / 2,\n  style,\n  colorMode = 'dark',\n  containerColor = colorMode === 'dark' ? '#333' : '#eee',\n  containerStyle,\n  color = '#00C806',\n  transition = {\n    type: 'timing',\n    duration: 200,\n  },\n  silenceRenderWarnings = false,\n}: MotiProgressBarProps) {\n  const barState = useDynamicAnimation(() => ({\n    translateX: '-100%',\n  }))\n\n  // TODO this won't be necessary once Moti memoizes props for you.\n  if (!transition) {\n    console.error(\n      `[moti] <ProgressBar /> \"transition\" prop must be undefined or a Moti transition object, but it got this type instead: ${typeof transition}.`,\n      transition\n    )\n  }\n  const transitionString = JSON.stringify(transition)\n  const _transition = useMemo<typeof transition>(\n    () => JSON.parse(transitionString),\n    [transitionString]\n  )\n\n  const outerStyle = useMemo(\n    () => [\n      styles.container,\n      containerStyle,\n      { height, borderRadius, backgroundColor: containerColor },\n    ],\n    [borderRadius, containerColor, containerStyle, height]\n  )\n\n  const progressStyle = useMemo(\n    () => [style, styles.bar, { borderRadius, backgroundColor: color }],\n    [borderRadius, color, style]\n  )\n\n  useEffect(\n    function animateOnProgressChange() {\n      const percent = Math.round(progress * 100)\n\n      const translateX = `${percent - 100}%`\n      if (barState.current?.translateX !== translateX) {\n        barState.animateTo((current) => ({ ...current, translateX }))\n      }\n    },\n    [barState, progress]\n  )\n\n  const unnecessaryRerenders = useRef({\n    containerStyle: {\n      previousValue: containerStyle,\n      changes: 0,\n    },\n    style: {\n      previousValue: style,\n      changes: 0,\n    },\n  })\n  useEffect(\n    function checkUnnecessaryRerenders() {\n      const isDev = typeof __DEV__ === 'undefined' || __DEV__\n      if (silenceRenderWarnings || !isDev) {\n        return\n      }\n\n      if (\n        containerStyle !==\n        unnecessaryRerenders.current.containerStyle.previousValue\n      ) {\n        unnecessaryRerenders.current.containerStyle.changes += 1\n      }\n      if (style !== unnecessaryRerenders.current.style.previousValue) {\n        unnecessaryRerenders.current.style.changes += 1\n      }\n\n      const warningProps: { changes: number; prop: string }[] = []\n\n      Object.entries(unnecessaryRerenders.current).forEach(\n        ([prop, { changes }]) => {\n          if (changes > 5) {\n            warningProps.push({ prop, changes })\n          }\n        }\n      )\n\n      if (warningProps.length) {\n        console.warn(\n          `[moti] <MotiProgress /> is re-rendering often due to these props: ${warningProps\n            .map(\n              (warning) => `\"${warning.prop}: ${warning.changes} re-renders\"`\n            )\n            .join(\n              ', '\n            )}. This can reduce animation performance. Please memoize these props with useMemo, or create them outside of render code.`,\n          `If you are intentionally re-rendering this often, for some reason, pass silenceRenderWarnings={true} on this component.`\n        )\n      }\n    },\n    [containerStyle, silenceRenderWarnings, style]\n  )\n\n  return useMemo(\n    () => (\n      <View style={outerStyle}>\n        <MotiView\n          transition={_transition}\n          state={barState}\n          style={progressStyle}\n        />\n      </View>\n    ),\n    [_transition, barState, outerStyle, progressStyle]\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    overflow: 'hidden',\n  },\n  bar: {\n    width: '100%',\n    height: '100%',\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}