{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\13093\\\\codestuff\\\\portfolio\\\\src\\\\components\\\\AnimatedBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Pressable, Switch, Text, useColorMode } from \"native-base\";\nimport { View } from \"react-native\";\nimport { useSpring, animated, useSpringValue } from \"@react-spring/web\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedBackground = () => {\n  _s();\n  const {\n    colorMode,\n    toggleColorMode\n  } = useColorMode();\n  const colorvalue = useSpringValue(0);\n  const colorFade = useSpring({\n    from: {\n      backgroundColor: colorMode === \"light\" ? \"white\" : \"black\"\n    },\n    to: {\n      backgroundColor: colorMode === \"light\" ? \"black\" : \"white\"\n    }\n  });\n  const handleToggle = () => {\n    colorFade.start();\n    toggleColorMode();\n  };\n  // const handleToggle = () => {\n\n  //   toggleColorMode();\n  //   colorvalue.start({\n  //     from: {\n  //       backgroundColor: colorMode === \"light\" ? \"black\" : \"white\",\n  //     },\n  //     to: {\n  //       backgroundColor: colorMode === \"dark\" ? \"white\" : \"black\",\n  //     },\n  //   });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      position: \"fixed\",\n      zIndex: \"100\",\n      onValueChange: handleToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(animated.div, {\n      style: {\n        backgroundColor: colorvalue.to([0, 1], [\"white\", \"black\"]),\n        height: 200,\n        width: 200,\n        ...stuff\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(AnimatedBackground, \"Xwbp+rVc0KNU5du61PvQ2/AibYU=\", false, function () {\n  return [useColorMode, useSpringValue, useSpring];\n});\n_c = AnimatedBackground;\nexport default AnimatedBackground;\nvar _c;\n$RefreshReg$(_c, \"AnimatedBackground\");","map":{"version":3,"names":["React","useState","useEffect","Box","Pressable","Switch","Text","useColorMode","View","useSpring","animated","useSpringValue","AnimatedBackground","colorMode","toggleColorMode","colorvalue","colorFade","from","backgroundColor","to","handleToggle","start","height","width","stuff"],"sources":["C:/Users/13093/codestuff/portfolio/src/components/AnimatedBackground.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Box, Pressable, Switch, Text, useColorMode } from \"native-base\";\r\n\r\nimport { View } from \"react-native\";\r\nimport { useSpring, animated, useSpringValue } from \"@react-spring/web\";\r\n\r\nconst AnimatedBackground = () => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const colorvalue = useSpringValue(0);\r\n  const colorFade = useSpring({\r\n    from: { backgroundColor: colorMode === \"light\" ? \"white\" : \"black\" },\r\n    to: { backgroundColor: colorMode === \"light\" ? \"black\" : \"white\" },\r\n  });\r\n\r\n  const handleToggle = () => {\r\n    colorFade.start();\r\n    toggleColorMode();\r\n  };\r\n  // const handleToggle = () => {\r\n\r\n  //   toggleColorMode();\r\n  //   colorvalue.start({\r\n  //     from: {\r\n  //       backgroundColor: colorMode === \"light\" ? \"black\" : \"white\",\r\n  //     },\r\n  //     to: {\r\n  //       backgroundColor: colorMode === \"dark\" ? \"white\" : \"black\",\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Switch position={\"fixed\"} zIndex=\"100\" onValueChange={handleToggle} />\r\n      <animated.div\r\n        style={{\r\n          backgroundColor: colorvalue.to([0, 1], [\"white\", \"black\"]),\r\n          height: 200,\r\n          width: 200,\r\n          ...stuff,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnimatedBackground;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,SAAS,EAAEC,MAAM,EAAEC,IAAI,EAAEC,YAAY,QAAQ,aAAa;AAExE,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,SAAS,EAAEC,QAAQ,EAAEC,cAAc,QAAQ,mBAAmB;AAAC;AAAA;AAExE,MAAMC,kBAAkB,GAAG,MAAM;EAAA;EAC/B,MAAM;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGP,YAAY,EAAE;EAErD,MAAMQ,UAAU,GAAGJ,cAAc,CAAC,CAAC,CAAC;EACpC,MAAMK,SAAS,GAAGP,SAAS,CAAC;IAC1BQ,IAAI,EAAE;MAAEC,eAAe,EAAEL,SAAS,KAAK,OAAO,GAAG,OAAO,GAAG;IAAQ,CAAC;IACpEM,EAAE,EAAE;MAAED,eAAe,EAAEL,SAAS,KAAK,OAAO,GAAG,OAAO,GAAG;IAAQ;EACnE,CAAC,CAAC;EAEF,MAAMO,YAAY,GAAG,MAAM;IACzBJ,SAAS,CAACK,KAAK,EAAE;IACjBP,eAAe,EAAE;EACnB,CAAC;EACD;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAA,wBACE,QAAC,MAAM;MAAC,QAAQ,EAAE,OAAQ;MAAC,MAAM,EAAC,KAAK;MAAC,aAAa,EAAEM;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,eACvE,QAAC,QAAQ,CAAC,GAAG;MACX,KAAK,EAAE;QACLF,eAAe,EAAEH,UAAU,CAACI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC1DG,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,GAAG;QACV,GAAGC;MACL;IAAE;MAAA;MAAA;MAAA;IAAA,QACF;EAAA,gBACD;AAEP,CAAC;AAAC,GAvCIZ,kBAAkB;EAAA,QACiBL,YAAY,EAEhCI,cAAc,EACfF,SAAS;AAAA;AAAA,KAJvBG,kBAAkB;AAyCxB,eAAeA,kBAAkB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}